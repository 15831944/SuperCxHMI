// CxHmiObj.idl : IDL source for CxHmiObj.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (CxHmiObj.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

#include "olectl.h"
#include "CxDispid.h"

[
	uuid(D75F0066-DC61-4679-A739-5B046E2C9088),
	version(1.0),
	helpstring("CxHmiObj 1.0 Type Library")
]
library CXHMIOBJLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	//属性编辑器特殊处理
	typedef [uuid(9A4D2FE0-8F03-11d3-3344-0077ADB811C5), public] BSTR BRUSHFILE;
	typedef [uuid(6650430D-BE0F-101A-8BBB-00AA00300CAB), public] BSTR CXFONTNAME;
	typedef [uuid(60B6FC0B-6281-4d0a-93D6-1B7AB11F7649), public] BSTR TAGGROUPTYPE;
	typedef [uuid(641F53DB-7EC8-4b4e-BCB9-A01980C9C1D4), public] BSTR SECURITYAREATYPE;
	typedef [uuid(51FC836E-FCFF-4ede-ADF9-BBE121FF69E3), public] VARIANT CXVARIABLETYPE;

	typedef
	[
		uuid(BC990B0D-BE98-4336-AFB4-C015B318AAAB),
		helpstring("Data entry mode"),	
	] 
	enum  
	{
		DataEntryModeNumeric = 0x0, 
		DataEntryModeText = 0x1, 
		DataEntryModeSlider = 0x2,
		DataEntryModePushbutton = 0x3,
	} enumDataEntryMode;

	typedef 
	[
		uuid(7B65634C-CDF6-4fe5-AD2D-ACEB8176AF83),
		helpstring("Data Connection Command Type"),	
	]
    enum 
	{
		CommandTypeUnknown = 8,
        CommandTypeText = 1,
        CommandTypeTable = 2,
        CommandTypeStoredProc = 4,
    } enumCommandType;

	typedef 
	[
		uuid(8DB3CCFB-FB64-4b14-B212-4BE3E65EBAC3),
		helpstring("Data Recordset Position"),	
	]
    enum 
	{
		PositionUnknown = -1,
        PositionBOF = -2,
        PositionEOF = -3
    } enumPosition;

	typedef [uuid(B642DA30-ECDD-4f50-8662-A73D9F738661)]
    enum {
        DataTypeEmpty = 0,
        DataTypeTinyInt = 16,
        DataTypeSmallInt = 2,
        DataTypeInteger = 3,
        DataTypeBigInt = 20,
        DataTypeUnsignedTinyInt = 17,
        DataTypeUnsignedSmallInt = 18,
        DataTypeUnsignedInt = 19,
        DataTypeUnsignedBigInt = 21,
        DataTypeSingle = 4,
        DataTypeDouble = 5,
        DataTypeCurrency = 6,
        DataTypeDecimal = 14,
        DataTypeNumeric = 131,
        DataTypeBoolean = 11,
        DataTypeIUnknown = 13,
        DataTypeError = 10,
        DataTypeUserDefined = 132,
        DataTypeVariant = 12,
        DataTypeIDispatch = 9,
        DataTypeGUID = 72,
        DataTypeDate = 7,
        DataTypeDBDate = 133,
        DataTypeDBTime = 134,
        DataTypeDBTimeStamp = 135,
        DataTypeBSTR = 8,
        DataTypeChar = 129,
        DataTypeVarChar = 200,
        DataTypeLongVarChar = 201,
        DataTypeWChar = 130,
        DataTypeVarWChar = 202,
        DataTypeLongVarWChar = 203,
        DataTypeBinary = 128,
        DataTypeVarBinary = 204,
        DataTypeLongVarBinary = 205,
        DataTypeChapter = 136,
        DataTypeFileTime = 64,
        DataTypeDBFileTime = 137,
        DataTypePropVariant = 138,
        DataTypeVarNumeric = 139
    } enumDataType;

	typedef
	[
		uuid(0BADCE7B-1A2D-43ec-A24D-50253A7C60DB),
		helpstring("线风格"),	
	] 
	enum 
	{
		LineStyleSolid = 0,
		LineStyleDash = 1,
		LineStyleDot = 2,
		LineStyleDashDot = 3,
		LineStyleDashDotDot = 4,
		LineStyleNone = 5,
	} enumLineStyle;

	typedef
	[
		uuid(79755369-F2CB-42ac-A17B-82D1C709AFD8),
		helpstring("Scroll Directionion"),	
	] 
	enum 
	{
		MarkerStyleNone = 0,
		MarkerStyleCross = 1,
		MarkerStyleCircle = 2,
		MarkerStyleTriangle = 3,
		MarkerStyleDiamond = 4,
		MarkerStyleSquare = 5,
	} enumMarkerStyle;

	typedef
	[
		uuid(67824F14-F3A0-4fac-BCBD-65680D291004),
		helpstring("Property type"),	
	] 
	enum  
	{
		[helpstring("颜色")]			PropertyTypeColor = 0x0, 
		[helpstring("布尔")]			PropertyTypeBool = 0x1, 
		[helpstring("字符串")]			PropertyTypeString = 0x2,
		[helpstring("数字")]			PropertyTypeNumeric = 0x3,
		[helpstring("未知")]			PropertyTypeUnknown = 0x4,
	} enumPropertyType;

	typedef
	[
		uuid(83F2361D-9D4D-4feb-98CD-35E73DD38387),
		helpstring("Scroll Directionion"),	
	] 
	enum {
		[helpstring("向左")]			ScrollDirectionLeft = 0x0, 
		[helpstring("向右")]			ScrollDirectionRight = 0x1, 
	} enumScrollDirection;

	typedef
	[
		uuid(DF9E6BD1-B791-4dd9-AD78-8361C50DFB6E),
		helpstring("Zoom mode"),	
	] 
	enum {
		[helpstring("水平")]			ZoomModeHorizontal = 0x0, 
		[helpstring("垂直")]			ZoomModeVertical = 0x1, 
		[helpstring("两者都")]			ZoomModeBoth = 0x2, 
	} enumZoomMode;

	typedef 
	[
		uuid(0D1103CF-D74E-4eba-910A-70AC742D8D90),
		helpstring("按钮风格")
	]
	enum
	{
        [helpstring("无")]				BitmapButtonStyleNone = 0,
	    [helpstring("按钮")]			BitmapButtonStylePush = 1,
        [helpstring("多态按钮")]		BitmapButtonStyleMultiState = 2
    } enumBitmapButtonStyle;

    typedef 
	[
		uuid(CDC78D10-204F-440d-80C9-5AB4C595EA84),
		helpstring("按钮状态")
	]
	enum
	{
        [helpstring("抬起")]			ButtonStateUp = 0,
        [helpstring("按下")]			ButtonStateDown = 1
    } enumButtonState;

    typedef 
	[
		uuid(809305A5-B9D7-4188-8E69-0714D35048D7),
		helpstring("边框风格")
	]
	enum
	{
        [helpstring("无")]				FrameStyleNone = 0,
		[helpstring("上升")]			FrameStyleRaised = 1,
        [helpstring("凹陷")]			FrameStyleSunken = 2,
        [helpstring("蚀刻")]			FrameStyleEtched = 3,
        [helpstring("撞击")]			FrameStyleBump = 4,
		[helpstring("矩形")]			FrameStyleRectangle = 5, 
    } enumFrameStyle;

	typedef
	[
		uuid(E7A1A540-B033-4acf-9146-5C391D3FEC46),
		helpstring("液体流动速度")
	]
	enum 
	{
		[helpstring("静止")]			FlowSpeedSleep = 0,
		[helpstring("低速")]			FlowSpeedLow = 1,
		[helpstring("中低速")]			FlowSpeedMiddleLow = 2,
		[helpstring("中速")]			FlowSpeedMiddle = 3,
		[helpstring("中高速")]			FlowSpeedMiddleHigh = 4,
		[helpstring("高速")]			FlowSpeedHigh = 5
	} enumFlowSpeed;

	typedef 
	[
		uuid(F5992B10-4D67-4818-B16C-6FF7A9405DD9),
		helpstring("流动方向")
	]
	enum
	{
        [helpstring("正向")]			FlowDirectionForward = 0,
        [helpstring("反向")]			FlowDirectionBackward= 1
    } enumFlowDirection;

	typedef 
	[
		uuid(BA426BB9-948C-4735-A5DE-82B36AC2BE13),
		helpstring("排序次序")
	]
	enum
	{
        [helpstring("升序")]			SortOrderAscending = 0,
        [helpstring("降序")]			SortOrderDescending = 1
    } enumSortOrder;

	typedef
	[
		uuid(83BB6D32-D54B-40cb-BCEB-F197AF75EF9C),
		helpstring("文本对齐方式类型")
	]
	enum
	{
		[helpstring("左对齐")]			TextAlignLeft = 0,
		[helpstring("中间对齐")]		TextAlignCenter	= 1,	
		[helpstring("右对齐")]			TextAlignRight = 2
	} enumTextAlign;

	typedef
	[
		uuid(A490A8D1-B70E-43d8-97D0-2098579F49C9),
		helpstring("背景模式类型")
	]
	enum 
	{
		[helpstring("透明")]			BackStyleTransparent = 0,
		[helpstring("实心")]			BackStyleOpaque = 1,
	} enumBackStyle;

	//垂直填充方向
	typedef 
	[
		uuid(D97DEE54-BD88-43bf-890B-F50373FABCE1),
		helpstring("垂直填充方向")
	]
	enum {
		[helpstring("顶部")]			VerticalDirectionFromTop = 0,
		[helpstring("中部")]			VerticalDirectionFromCenter = 1,
		[helpstring("底部")]			VerticalDirectionFromBottom = 2
	} enumVerticalDirection;

	//水平填充方向
	typedef 
	[
		uuid(A2370355-8A24-4166-98A3-AB8D65F51F00),
		helpstring("水平填充方向")
	]
	enum {
		[helpstring("左边")]			HorizontalDirectionFromLeft = 0,
		[helpstring("中间")]			HorizontalDirectionFromCenter = 1,
		[helpstring("右边")]			HorizontalDirectionFromRight = 2
	} enumHorizontalDirection;
	
	typedef 
	[
		uuid(0E4C1AB6-97FC-45c7-BE6C-85E0FF60E23E),
		helpstring("边界风格类型")
	]
	enum
	{
		[helpstring("实线")]			EdgeStyleSolid = 0,
		[helpstring("虑线")]			EdgeStyleDash = 1,
		[helpstring("点线")]			EdgeStyleDot = 2,
		[helpstring("点划线")]			EdgeStyleDashDot = 3,
		[helpstring("双点划线")]		EdgeStyleDashDotDot = 4,
		[helpstring("管道线")]			EdgeStylePipe = 5,
		[helpstring("透明线")]			EdgeStyleTransparence = 6, 
	} enumEdgeStyle;

	typedef 
	[
		uuid(53B80803-CBCB-41ee-AE29-03C454B097FD),
		helpstring("线接头类型")
	]
	enum 
	{
		[helpstring("园形接头")]		LineJoinStyleRound = 0,
		[helpstring("方形接头")]		LineJoinStyleSquare = 1
	}enumLineJoinStyle;

	//填充模式类别（同画刷）
	typedef 
	[
		uuid(3C76947A-EF50-4805-8B17-29F770A76452),
		helpstring("填充类型")
	]
	enum
	{
		[helpstring("实心")]			FillStyleSolid = 0,
		[helpstring("透明")]			FillStyleTransparence = 1,
		[helpstring("水平线")]			FillStyleHatchHorizontal = 2,
		[helpstring("垂直线")]			FillStyleHatchVertical = 3,
		[helpstring("左斜线")]			FillStyleHatchForwardDiagonal = 4,
		[helpstring("右斜线")]			FillStyleHatchBackwardDiagonal = 5,
		[helpstring("正交线")]			FillStyleHatchCross = 6,
		[helpstring("斜交线")]			FillStyleHatchDiagonalCross = 7,
		[helpstring("左上亮")]			FillStyleGradientLeftTopLight = 8,
		[helpstring("右上亮")]			FillStyleGradientRightTopLight = 9,
		[helpstring("右下亮")]			FillStyleGradientRightBottomLight = 10,
		[helpstring("左下亮")]			FillStyleGradientLeftBottomLight = 11,
		[helpstring("水平中亮")]		FillStyleGradientHorMiddleLight	= 12,
		[helpstring("水平边亮")]		FillStyleGradientHorSideLight = 13,
		[helpstring("水平左亮")]		FillStyleGradientHorLeftLight = 14,
		[helpstring("水平右亮")]		FillStyleGradientHorRightLight = 15,
		[helpstring("垂直中亮")]		FillStyleGradientVerMiddleLight	= 16,
		[helpstring("垂直边亮")]		FillStyleGradientVerSideLight = 17,
		[helpstring("垂直上亮")]		FillStyleGradientVerTopLight = 18,
		[helpstring("垂直下亮")]		FillStyleGradientVerBottomLight	= 19,
		[helpstring("中心亮")]			FillStyleGradientCenterLight = 20,
		[helpstring("四边亮")]			FillStyleGradientAroundLight = 21,
		[helpstring("图像")]			FillStyleImage = 22
	} enumFillStyle;

	typedef
	[
		uuid(1012A3DB-87B1-4554-A36F-C5B691745462),
		helpstring("缩放基点类型")
	]
	enum
	{
		[helpstring("中心点")]			ScaleBasePointCenter = 0,
		[helpstring("左上角点")]		ScaleBasePointLeftTop = 1,
		[helpstring("上边中点")]		ScaleBasePointTopMiddle = 2,
		[helpstring("右上角点")]		ScaleBasePointRightTop = 3,
		[helpstring("右边中点")]		ScaleBasePointRightMiddle = 4,
		[helpstring("右下角点")]		ScaleBasePointRightBottom = 5,
		[helpstring("下边中点")]		ScaleBasePointBottomMiddle = 6,
		[helpstring("左下角点")]		ScaleBasePointLeftBottom = 7,
		[helpstring("左边中点")]		ScaleBasePointLeftMiddle = 8,
	} enumScaleBasePoint;

	typedef
	[
		uuid(4E48FF9F-7337-11D5-A46A-CEFAB2DB0476),
		helpstring("园弧类型")
	]
	enum 
	{
		[helpstring("楔形")]	PieTypeWedge = 0,
		[helpstring("饼形")]	PieTypeCutOut = 1,
		[helpstring("任意")]	PieTypeFreeHand = 2
	} enumPieType;
	 
	//字体类别
	typedef
	[
		uuid(15822014-CC5B-4075-829A-626B9917BDFC),
		helpstring("字体风格类型")
	]
	enum 
	{
		[helpstring("规则")]			FontStyleRegular = 0,
		[helpstring("粗体")]			FontStyleBold = 1,
		[helpstring("斜体")]			FontStyleItalic = 2,
		[helpstring("粗斜体")]			FontStyleBoldItalic = 3
	} enumFontStyle;

	//鼠标输入模式
	typedef
	[
		uuid(48E5F757-9065-4c50-AA52-9BB1905EF97C),
		helpstring("鼠标输入模式类型")
	]
	enum 
	{
		[helpstring("不允许")]			MouseInputModeNone = 0,
		[helpstring("水平")]			MouseInputModeHorizonal = 1,
		[helpstring("垂直")]			MouseInputModeVertical = 2,
		[helpstring("水平|垂直")]		MouseInputModeHorAndVer = 3,
		[helpstring("旋转")]			MouseInputModeRotate = 4
	} enumMouseInputMode;

	typedef
	[
		uuid(2802C729-3A9C-46f1-9BE3-66E95CDF8C91),
		helpstring("鼠标指针类型")
	]
	enum 
	{
		[helpstring("默认")]			MousePointerDefault = 0,
		[helpstring("箭头")]			MousePointerArrow = 1,
		[helpstring("十字")]			MousePointerCross = 2,
		[helpstring("I 形标")]			MousePointerIBeam = 3,
		[helpstring("斜下双箭头")]		MousePointerSizeNESW = 4,
		[helpstring("南北双箭头")]		MousePointerSizeNS = 5,
		[helpstring("斜上双箭头")]		MousePointerSizeNWSE = 6,
		[helpstring("东西双箭头")]		MousePointerSizeWE = 7,
		[helpstring("上箭头")]			MousePointerUpArrow = 8,
		[helpstring("沙漏")]			MousePointerHourglass = 9,
		[helpstring("四向箭头")]		MousePointerSizeAll = 10,
		[helpstring("手")]				MousePointerHand = 11,
	}  enumMousePointer;

	typedef
	[
		uuid(A220AE38-A3CE-40c3-A2F3-89658D574B33),
		helpstring("强制分页类型")
	]
	enum 
	{
		[helpstring("无")]				PageBreakNone = 0,
		[helpstring("前分页")]			PageBreakBefore = 1,
		[helpstring("后分页")]			PageBreakAfter = 2,
		[helpstring("前后分页")]		PageBreakBeforeAndAfter = 3,
	}  enumForcePageBreak;

	typedef
	[
		uuid(FB6BF3F7-FE16-4bf7-B4AB-3326FC380FDC),
		helpstring("窗体边框类型")
	]
	enum 
	{
		[helpstring("无")]				BorderStyleNone = 0,
		[helpstring("单边框")]			BorderStyleSingle = 1,
		[helpstring("可调整边框")]		BorderStyleSizable = 2,
	}  enumBorderStyle;

	typedef
	[
		uuid(F1419FEB-28D6-474b-858D-5955417D2C5E),
		helpstring("首次出现位置")
	]
	enum 
	{
		[helpstring("手动")]			StartUpPositionManual = 0,
		[helpstring("所有者中心")]		StartUpPositionOwner = 1,
		[helpstring("屏幕中心")]		StartUpPositionScreen = 2,
		[helpstring("窗口缺省")]		StartUpPositionWindowsDefault = 3,
	}  enumStartUpPosition;

	typedef
	[
		uuid(1A7402D5-6B66-4109-A594-E17FC2D256BE),
		helpstring("菜单项状态")
	]
	enum 
	{
		[helpstring("禁止")]			MenuStateDisable = 1,
		[helpstring("选中")]			MenuStateCheck = 2,
	}  enumMenuState;

	typedef
	[
		uuid(E3F42BB8-0932-4f65-9C08-C4272F91FC80),
		helpstring("控制键状态")
	]
	enum 
	{
		[helpstring("Shift 状态")]		ShiftStateShift = 1,
		[helpstring("Control 状态")]	ShiftStateControl = 2,
		[helpstring("Alt 状态")]		ShiftStateAlt = 4,
	}  enumShiftState;

	interface IObjectCollection;

	[
		object,
		uuid(80E4C821-6F0E-11D5-A46A-ABD633FF0766),
		dual,
		helpstring("IFloatPoint Interface"),
		pointer_default(unique)
	]
	interface IFloatPoint : IDispatch
	{
		[propget, id(1), helpstring("property X")] HRESULT X([out, retval] float *pVal);
		[propput, id(1), helpstring("property X")] HRESULT X([in] float newVal);
		[propget, id(2), helpstring("property Y")] HRESULT Y([out, retval] float *pVal);
		[propput, id(2), helpstring("property Y")] HRESULT Y([in] float newVal);
	};

	[
		object,
		uuid(8C82DC47-4DD8-440D-94DC-914FDF5BEBB6),
		dual,
		helpstring("IDrawLine Interface"),
		pointer_default(unique)
	]
	interface IDrawLine : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
	
		[propget, id(CXPROPID_StartX), helpstring("起点横坐标")] HRESULT StartX([out, retval] float *pVal);
		[propput, id(CXPROPID_StartX), helpstring("起点横坐标")] HRESULT StartX([in] float newVal);
		[propget, id(CXPROPID_StartY), helpstring("起点纵坐标")] HRESULT StartY([out, retval] float *pVal);
		[propput, id(CXPROPID_StartY), helpstring("起点纵坐标")] HRESULT StartY([in] float newVal);
		[propget, id(CXPROPID_EndX), helpstring("终点横坐标")] HRESULT EndX([out, retval] float *pVal);
		[propput, id(CXPROPID_EndX), helpstring("终点横坐标")] HRESULT EndX([in] float newVal);
		[propget, id(CXPROPID_EndY), helpstring("终点纵坐标")] HRESULT EndY([out, retval] float *pVal);
		[propput, id(CXPROPID_EndY), helpstring("终点纵坐标")] HRESULT EndY([in] float newVal);
		
		[propget, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([out, retval] enumEdgeStyle *pVal);
		[propput, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([in] enumEdgeStyle newVal);
		[propget, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([out, retval] float *pVal);
		[propput, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([in] float newVal);
		[propget, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([out, retval] enumLineJoinStyle *pVal);
		[propput, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([in] enumLineJoinStyle newVal);

		[propget, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([in] OLE_COLOR newVal);
		
		[propget, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([in] float newVal);
		[propget, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([in] float newVal);
		[propget, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([out, retval] float *pVal);
		[propput, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([in] float newVal);
		[propget, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([out, retval] enumScaleBasePoint *pVal);
		[propput, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([in] enumScaleBasePoint newVal);
		[propget, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([in] float newVal);
		[propget, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([in] float newVal);

		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
		[propget, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([out, retval] int *pVal);
		[propput, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([in] int newVal);
		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
	};

	[
		object,
		uuid(8F563EFF-CC51-4956-B881-E67007A337B1),
		dual,
		helpstring("IDrawRectangle Interface"),
		pointer_default(unique)
	]
	interface IDrawRectangle : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
	
		[propget, id(CXPROPID_FillStyle), helpstring("填充类型")] HRESULT FillStyle([out, retval] enumFillStyle *pVal);
		[propput, id(CXPROPID_FillStyle), helpstring("填充类型")] HRESULT FillStyle([in] enumFillStyle newVal);
		[propget, id(CXPROPID_HorFillDirection), helpstring("水平填充方向")] HRESULT HorizontalFillDirection([out, retval] enumHorizontalDirection *pVal);
		[propput, id(CXPROPID_HorFillDirection), helpstring("水平填充方向")] HRESULT HorizontalFillDirection([in] enumHorizontalDirection newVal);
		[propget, id(CXPROPID_VerFillDirection), helpstring("垂直填充方向")] HRESULT VerticalFillDirection([out, retval] enumVerticalDirection *pVal);
		[propput, id(CXPROPID_VerFillDirection), helpstring("垂直填充方向")] HRESULT VerticalFillDirection([in] enumVerticalDirection newVal);
		[propget, id(CXPROPID_HorFillPercent), helpstring("水平填充度")] HRESULT HorizontalFillPercent([out, retval] int *pVal);
		[propput, id(CXPROPID_HorFillPercent), helpstring("水平填充度")] HRESULT HorizontalFillPercent([in] int newVal);
		[propget, id(CXPROPID_VerFillPercent), helpstring("垂直填充度")] HRESULT VerticalFillPercent([out, retval] int *pVal);
		[propput, id(CXPROPID_VerFillPercent), helpstring("垂直填充度")] HRESULT VerticalFillPercent([in] int newVal);
		[propget, id(CXPROPID_BrushImageFileName), helpstring("位图画刷文件")] HRESULT BrushImageFileName([out, retval] BRUSHFILE *pVal);
		[propput, id(CXPROPID_BrushImageFileName), helpstring("位图画刷文件")] HRESULT BrushImageFileName([in] BRUSHFILE newVal);
					 
		[propget, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([out, retval] enumEdgeStyle *pVal);
		[propput, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([in] enumEdgeStyle newVal);
		[propget, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([out, retval] float *pVal);
		[propput, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([in] float newVal);
		[propget, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([out, retval] enumLineJoinStyle *pVal);
		[propput, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([in] enumLineJoinStyle newVal);
			
		[propget, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_FillColor), helpstring("填充颜色")] HRESULT FillColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_FillColor), helpstring("填充颜色")] HRESULT FillColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_HighLightFillColor), helpstring("高亮填充颜色")] HRESULT HighLightFillColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_HighLightFillColor), helpstring("高亮填充颜色")] HRESULT HighLightFillColor([in] OLE_COLOR newVal);
		
		[propget, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([in] float newVal);
		[propget, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([in] float newVal);
		[propget, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([out, retval] float *pVal);
		[propput, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([in] float newVal);
		[propget, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([out, retval] enumScaleBasePoint *pVal);
		[propput, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([in] enumScaleBasePoint newVal);
		[propget, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([in] float newVal);
		[propget, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([in] float newVal);

		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
		[propget, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([out, retval] int *pVal);
		[propput, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([in] int newVal);
		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
	};

	[
		object,
		uuid(2E847218-9E61-4005-A629-52AD7E64C114),
		dual,
		helpstring("IDrawEllipse Interface"),
		pointer_default(unique)
	]
	interface IDrawEllipse : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
	
		[propget, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([out, retval] enumEdgeStyle *pVal);
		[propput, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([in] enumEdgeStyle newVal);
		[propget, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([out, retval] float *pVal);
		[propput, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([in] float newVal);
		[propget, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([out, retval] enumLineJoinStyle *pVal);
		[propput, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([in] enumLineJoinStyle newVal);
	
		[propget, id(CXPROPID_FillStyle), helpstring("填充类型")] HRESULT FillStyle([out, retval] enumFillStyle *pVal);
		[propput, id(CXPROPID_FillStyle), helpstring("填充类型")] HRESULT FillStyle([in] enumFillStyle newVal);
		[propget, id(CXPROPID_HorFillDirection), helpstring("水平填充方向")] HRESULT HorizontalFillDirection([out, retval] enumHorizontalDirection *pVal);
		[propput, id(CXPROPID_HorFillDirection), helpstring("水平填充方向")] HRESULT HorizontalFillDirection([in] enumHorizontalDirection newVal);
		[propget, id(CXPROPID_VerFillDirection), helpstring("垂直填充方向")] HRESULT VerticalFillDirection([out, retval] enumVerticalDirection *pVal);
		[propput, id(CXPROPID_VerFillDirection), helpstring("垂直填充方向")] HRESULT VerticalFillDirection([in] enumVerticalDirection newVal);
		[propget, id(CXPROPID_HorFillPercent), helpstring("水平填充度")] HRESULT HorizontalFillPercent([out, retval] int *pVal);
		[propput, id(CXPROPID_HorFillPercent), helpstring("水平填充度")] HRESULT HorizontalFillPercent([in] int newVal);
		[propget, id(CXPROPID_VerFillPercent), helpstring("垂直填充度")] HRESULT VerticalFillPercent([out, retval] int *pVal);
		[propput, id(CXPROPID_VerFillPercent), helpstring("垂直填充度")] HRESULT VerticalFillPercent([in] int newVal);
		[propget, id(CXPROPID_BrushImageFileName), helpstring("位图画刷文件")] HRESULT BrushImageFileName([out, retval] BRUSHFILE *pVal);
		[propput, id(CXPROPID_BrushImageFileName), helpstring("位图画刷文件")] HRESULT BrushImageFileName([in] BRUSHFILE newVal);
					 
		[propget, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_FillColor), helpstring("填充颜色")] HRESULT FillColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_FillColor), helpstring("填充颜色")] HRESULT FillColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_HighLightFillColor), helpstring("高亮填充颜色")] HRESULT HighLightFillColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_HighLightFillColor), helpstring("高亮填充颜色")] HRESULT HighLightFillColor([in] OLE_COLOR newVal);
	
		[propget, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([in] float newVal);
		[propget, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([in] float newVal);
		[propget, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([out, retval] float *pVal);
		[propput, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([in] float newVal);
		[propget, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([out, retval] enumScaleBasePoint *pVal);
		[propput, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([in] enumScaleBasePoint newVal);
		[propget, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([in] float newVal);
		[propget, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([in] float newVal);

		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
		[propget, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([out, retval] int *pVal);
		[propput, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([in] int newVal);
		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
	};

	[
		object,
		uuid(67CDC454-244C-4041-A19C-917AEA419BF0),
		dual,
		helpstring("IDrawRoundRectangle Interface"),
		pointer_default(unique)
	]
	interface IDrawRoundRectangle : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
		
		[propget, id(1), helpstring("roundness position X"), hidden] HRESULT RoundNessX([out, retval] float *pVal);
		[propput, id(1), helpstring("roundness position X"), hidden] HRESULT RoundNessX([in] float newVal);
		[propget, id(2), helpstring("roundness position Y"), hidden] HRESULT RoundNessY([out, retval] float *pVal);
		[propput, id(2), helpstring("roundness position Y"), hidden] HRESULT RoundNessY([in] float newVal);
						
		[propget, id(CXPROPID_FillStyle), helpstring("填充类型")] HRESULT FillStyle([out, retval] enumFillStyle *pVal);
		[propput, id(CXPROPID_FillStyle), helpstring("填充类型")] HRESULT FillStyle([in] enumFillStyle newVal);
		[propget, id(CXPROPID_HorFillDirection), helpstring("水平填充方向")] HRESULT HorizontalFillDirection([out, retval] enumHorizontalDirection *pVal);
		[propput, id(CXPROPID_HorFillDirection), helpstring("水平填充方向")] HRESULT HorizontalFillDirection([in] enumHorizontalDirection newVal);
		[propget, id(CXPROPID_VerFillDirection), helpstring("垂直填充方向")] HRESULT VerticalFillDirection([out, retval] enumVerticalDirection *pVal);
		[propput, id(CXPROPID_VerFillDirection), helpstring("垂直填充方向")] HRESULT VerticalFillDirection([in] enumVerticalDirection newVal);
		[propget, id(CXPROPID_HorFillPercent), helpstring("水平填充度")] HRESULT HorizontalFillPercent([out, retval] int *pVal);
		[propput, id(CXPROPID_HorFillPercent), helpstring("水平填充度")] HRESULT HorizontalFillPercent([in] int newVal);
		[propget, id(CXPROPID_VerFillPercent), helpstring("垂直填充度")] HRESULT VerticalFillPercent([out, retval] int *pVal);
		[propput, id(CXPROPID_VerFillPercent), helpstring("垂直填充度")] HRESULT VerticalFillPercent([in] int newVal);
		[propget, id(CXPROPID_BrushImageFileName), helpstring("位图画刷文件")] HRESULT BrushImageFileName([out, retval] BRUSHFILE *pVal);
		[propput, id(CXPROPID_BrushImageFileName), helpstring("位图画刷文件")] HRESULT BrushImageFileName([in] BRUSHFILE newVal);
					 
		[propget, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([out, retval] enumEdgeStyle *pVal);
		[propput, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([in] enumEdgeStyle newVal);
		[propget, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([out, retval] float *pVal);
		[propput, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([in] float newVal);
		[propget, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([out, retval] enumLineJoinStyle *pVal);
		[propput, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([in] enumLineJoinStyle newVal);
	
		[propget, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_FillColor), helpstring("填充颜色")] HRESULT FillColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_FillColor), helpstring("填充颜色")] HRESULT FillColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_HighLightFillColor), helpstring("高亮填充颜色")] HRESULT HighLightFillColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_HighLightFillColor), helpstring("高亮填充颜色")] HRESULT HighLightFillColor([in] OLE_COLOR newVal);
	
		[propget, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([in] float newVal);
		[propget, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([in] float newVal);
		[propget, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([out, retval] float *pVal);
		[propput, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([in] float newVal);
		[propget, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([out, retval] enumScaleBasePoint *pVal);
		[propput, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([in] enumScaleBasePoint newVal);
		[propget, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([in] float newVal);
		[propget, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([in] float newVal);

		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
		[propget, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([out, retval] int *pVal);
		[propput, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([in] int newVal);
		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
	};

	[
		object,
		uuid(C479B495-BCB9-4BB2-99C2-F6FCF4BC4AC2),
		dual,
		helpstring("IDrawPolyline Interface"),
		pointer_default(unique)
	]

	interface IDrawPolyline : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
	
		[propget, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([out, retval] enumEdgeStyle *pVal);
		[propput, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([in] enumEdgeStyle newVal);
		[propget, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([out, retval] float *pVal);
		[propput, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([in] float newVal);
		[propget, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([out, retval] enumLineJoinStyle *pVal);
		[propput, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([in] enumLineJoinStyle newVal);
		
		[propget, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([in] OLE_COLOR newVal);
		
		[propget, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([in] float newVal);
		[propget, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([in] float newVal);
		[propget, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([out, retval] float *pVal);
		[propput, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([in] float newVal);
		[propget, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([out, retval] enumScaleBasePoint *pVal);
		[propput, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([in] enumScaleBasePoint newVal);
		[propget, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([in] float newVal);
		[propget, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([in] float newVal);

		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
		[propget, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([out, retval] int *pVal);
		[propput, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([in] int newVal);
		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);

		[id(CXMETHID_AddPoint), helpstring("method AddPoint")] HRESULT AddPoint(IFloatPoint* pPoint);
		[id(CXMETHID_GetNumberOfPoints), helpstring("method GetNumberOfPoints")] HRESULT GetNumberOfPoints([out, retval] long *pVal);
		[id(CXMETHID_DeletePoint), helpstring("method DeletePoint")] HRESULT DeletePoint(long lIndex);
		[id(CXMETHID_GetPointAt), helpstring("method GetPointAt")] HRESULT GetPointAt([in] long lIndex, [out, retval] IFloatPoint** ppPoint);
	};

	[
		object,
		uuid(8176CBAD-6F0A-11D5-A46A-D494218C0B66),
		dual,
		helpstring("IDrawPolygon Interface"),
		pointer_default(unique)
	]
	interface IDrawPolygon : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
	
		[propget, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([out, retval] enumEdgeStyle *pVal);
		[propput, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([in] enumEdgeStyle newVal);
		[propget, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([out, retval] float *pVal);
		[propput, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([in] float newVal);
		[propget, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([out, retval] enumLineJoinStyle *pVal);
		[propput, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([in] enumLineJoinStyle newVal);

		[propget, id(CXPROPID_FillStyle), helpstring("填充类型")] HRESULT FillStyle([out, retval] enumFillStyle *pVal);
		[propput, id(CXPROPID_FillStyle), helpstring("填充类型")] HRESULT FillStyle([in] enumFillStyle newVal);
		[propget, id(CXPROPID_HorFillDirection), helpstring("水平填充方向")] HRESULT HorizontalFillDirection([out, retval] enumHorizontalDirection *pVal);
		[propput, id(CXPROPID_HorFillDirection), helpstring("水平填充方向")] HRESULT HorizontalFillDirection([in] enumHorizontalDirection newVal);
		[propget, id(CXPROPID_VerFillDirection), helpstring("垂直填充方向")] HRESULT VerticalFillDirection([out, retval] enumVerticalDirection *pVal);
		[propput, id(CXPROPID_VerFillDirection), helpstring("垂直填充方向")] HRESULT VerticalFillDirection([in] enumVerticalDirection newVal);
		[propget, id(CXPROPID_HorFillPercent), helpstring("水平填充度")] HRESULT HorizontalFillPercent([out, retval] int *pVal);
		[propput, id(CXPROPID_HorFillPercent), helpstring("水平填充度")] HRESULT HorizontalFillPercent([in] int newVal);
		[propget, id(CXPROPID_VerFillPercent), helpstring("垂直填充度")] HRESULT VerticalFillPercent([out, retval] int *pVal);
		[propput, id(CXPROPID_VerFillPercent), helpstring("垂直填充度")] HRESULT VerticalFillPercent([in] int newVal);
		[propget, id(CXPROPID_BrushImageFileName), helpstring("位图画刷文件")] HRESULT BrushImageFileName([out, retval] BRUSHFILE *pVal);
		[propput, id(CXPROPID_BrushImageFileName), helpstring("位图画刷文件")] HRESULT BrushImageFileName([in] BRUSHFILE newVal);
				 
		[propget, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_FillColor), helpstring("填充颜色")] HRESULT FillColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_FillColor), helpstring("填充颜色")] HRESULT FillColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_HighLightFillColor), helpstring("高亮填充颜色")] HRESULT HighLightFillColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_HighLightFillColor), helpstring("高亮填充颜色")] HRESULT HighLightFillColor([in] OLE_COLOR newVal);
			
		[propget, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([in] float newVal);
		[propget, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([in] float newVal);
		[propget, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([out, retval] float *pVal);
		[propput, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([in] float newVal);
		[propget, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([out, retval] enumScaleBasePoint *pVal);
		[propput, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([in] enumScaleBasePoint newVal);
		[propget, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([in] float newVal);
		[propget, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([in] float newVal);
		
		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
		[propget, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([out, retval] int *pVal);
		[propput, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([in] int newVal);
		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);

		[id(CXMETHID_AddPoint), helpstring("method AddPoint")] HRESULT AddPoint(IFloatPoint* pPoint);
		[id(CXMETHID_GetNumberOfPoints), helpstring("method GetNumberOfPoints")] HRESULT GetNumberOfPoints([out, retval] long *pVal);
		[id(CXMETHID_DeletePoint), helpstring("method DeletePoint")] HRESULT DeletePoint(long lIndex);
		[id(CXMETHID_GetPointAt), helpstring("method GetPointAt")] HRESULT GetPointAt([in] long lIndex, [out, retval] IFloatPoint** ppPoint);
	};

	[
		object,
		uuid(7B06EEAD-C999-4D5C-8875-C0FD50F00118),
		dual,
		helpstring("IDrawArc Interface"),
		pointer_default(unique)
	]
	interface IDrawArc : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
	
		[propget, id(CXPROPID_StartX), helpstring("起点横坐标")] HRESULT StartX([out, retval] long *pVal);
		[propput, id(CXPROPID_StartX), helpstring("起点横坐标")] HRESULT StartX([in] long newVal);
		[propget, id(CXPROPID_StartY), helpstring("起点纵坐标")] HRESULT StartY([out, retval] long *pVal);
		[propput, id(CXPROPID_StartY), helpstring("起点纵坐标")] HRESULT StartY([in] long newVal);
		[propget, id(CXPROPID_EndX), helpstring("终点横坐标")] HRESULT EndX([out, retval] long *pVal);
		[propput, id(CXPROPID_EndX), helpstring("终点横坐标")] HRESULT EndX([in] long newVal);
		[propget, id(CXPROPID_EndY), helpstring("终点纵坐标")] HRESULT EndY([out, retval] long *pVal);
		[propput, id(CXPROPID_EndY), helpstring("终点纵坐标")] HRESULT EndY([in] long newVal);
		[propget, id(CXPROPID_MiddleX), helpstring("中间点横坐标")] HRESULT MiddleX([out, retval] long *pVal);
		[propput, id(CXPROPID_MiddleX), helpstring("中间点横坐标")] HRESULT MiddleX([in] long newVal);
		[propget, id(CXPROPID_MiddleY), helpstring("中间点纵坐标")] HRESULT MiddleY([out, retval] long *pVal);
		[propput, id(CXPROPID_MiddleY), helpstring("中间点纵坐标")] HRESULT MiddleY([in] long newVal);
			
		[propget, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([out, retval] enumEdgeStyle *pVal);
		[propput, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([in] enumEdgeStyle newVal);
		[propget, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([out, retval] float *pVal);
		[propput, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([in] float newVal);
		
		[propget, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([out, retval] enumLineJoinStyle *pVal);
		[propput, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([in] enumLineJoinStyle newVal);
	
		[propget, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([in] float newVal);
		[propget, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([in] float newVal);
		[propget, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([out, retval] float *pVal);
		[propput, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([in] float newVal);
		[propget, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([out, retval] enumScaleBasePoint *pVal);
		[propput, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([in] enumScaleBasePoint newVal);
		[propget, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([in] float newVal);
		[propget, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([in] float newVal);

		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
		[propget, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([out, retval] int *pVal);
		[propput, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([in] int newVal);
		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
	};

	[
		object,
		uuid(4E48FF90-7337-11D5-A46A-C6FAB2DB0466),
		dual,
		helpstring("IDrawPie Interface"),
		pointer_default(unique)
	]
	interface IDrawPie : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
	
		[propget, id(CXPROPID_StartAngle), helpstring("起始角度")] HRESULT StartAngle([out, retval] float *pVal);
		[propput, id(CXPROPID_StartAngle), helpstring("起始角度")] HRESULT StartAngle([in] float newVal);
		[propget, id(CXPROPID_SweepAngle), helpstring("园弧角度")] HRESULT SweepAngle([out, retval] float *pVal);
		[propput, id(CXPROPID_SweepAngle), helpstring("园弧角度")] HRESULT SweepAngle([in] float newVal);
		[propget, id(CXPROPID_Radius), helpstring("园弧半径")] HRESULT Radius([out, retval] float *pVal);
		[propput, id(CXPROPID_Radius), helpstring("园弧半径")] HRESULT Radius([in] float newVal);
		[propget, id(CXPROPID_CenterX), helpstring("中心点横坐标")] HRESULT CenterX([out, retval] float *pVal);
		[propput, id(CXPROPID_CenterX), helpstring("中心点横坐标")] HRESULT CenterX([in] float newVal);
		[propget, id(CXPROPID_CenterY), helpstring("中心点纵坐标")] HRESULT CenterY([out, retval] float *pVal);
		[propput, id(CXPROPID_CenterY), helpstring("中心点纵坐标")] HRESULT CenterY([in] float newVal);
		[propget, id(CXPROPID_PieType), helpstring("画弧方式")] HRESULT PieType([out, retval] enumPieType *pVal);
		[propput, id(CXPROPID_PieType), helpstring("画弧方式")] HRESULT PieType([in] enumPieType newVal);

		[propget, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_FillColor), helpstring("填充颜色")] HRESULT FillColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_FillColor), helpstring("填充颜色")] HRESULT FillColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_HighLightFillColor), helpstring("高亮填充颜色")] HRESULT HighLightFillColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_HighLightFillColor), helpstring("高亮填充颜色")] HRESULT HighLightFillColor([in] OLE_COLOR newVal);
	
		[propget, id(CXPROPID_FillStyle), helpstring("填充类型")] HRESULT FillStyle([out, retval] enumFillStyle *pVal);
		[propput, id(CXPROPID_FillStyle), helpstring("填充类型")] HRESULT FillStyle([in] enumFillStyle newVal);
		[propget, id(CXPROPID_HorFillDirection), helpstring("水平填充方向")] HRESULT HorizontalFillDirection([out, retval] enumHorizontalDirection *pVal);
		[propput, id(CXPROPID_HorFillDirection), helpstring("水平填充方向")] HRESULT HorizontalFillDirection([in] enumHorizontalDirection newVal);
		[propget, id(CXPROPID_VerFillDirection), helpstring("垂直填充方向")] HRESULT VerticalFillDirection([out, retval] enumVerticalDirection *pVal);
		[propput, id(CXPROPID_VerFillDirection), helpstring("垂直填充方向")] HRESULT VerticalFillDirection([in] enumVerticalDirection newVal);
		[propget, id(CXPROPID_HorFillPercent), helpstring("水平填充度")] HRESULT HorizontalFillPercent([out, retval] int *pVal);
		[propput, id(CXPROPID_HorFillPercent), helpstring("水平填充度")] HRESULT HorizontalFillPercent([in] int newVal);
		[propget, id(CXPROPID_VerFillPercent), helpstring("垂直填充度")] HRESULT VerticalFillPercent([out, retval] int *pVal);
		[propput, id(CXPROPID_VerFillPercent), helpstring("垂直填充度")] HRESULT VerticalFillPercent([in] int newVal);
		[propget, id(CXPROPID_BrushImageFileName), helpstring("位图画刷文件")] HRESULT BrushImageFileName([out, retval] BRUSHFILE *pVal);
		[propput, id(CXPROPID_BrushImageFileName), helpstring("位图画刷文件")] HRESULT BrushImageFileName([in] BRUSHFILE newVal);
	
		[propget, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([out, retval] enumEdgeStyle *pVal);
		[propput, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([in] enumEdgeStyle newVal);
		[propget, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([out, retval] float *pVal);
		[propput, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([in] float newVal);
		[propget, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([out, retval] enumLineJoinStyle *pVal);
		[propput, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([in] enumLineJoinStyle newVal);

		[propget, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([in] float newVal);
		[propget, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([in] float newVal);
		[propget, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([out, retval] float *pVal);
		[propput, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([in] float newVal);
		[propget, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([out, retval] enumScaleBasePoint *pVal);
		[propput, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([in] enumScaleBasePoint newVal);
		[propget, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([in] float newVal);
		[propget, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([in] float newVal);

		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
		[propget, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([out, retval] int *pVal);
		[propput, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([in] int newVal);
		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
	};

	[
		object,
		uuid(0F6C1461-9850-499A-8C9D-B42E90F42C83),
		dual,
		helpstring("IDrawChord Interface"),
		pointer_default(unique)
	]
	interface IDrawChord : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
	
		[propget, id(CXPROPID_StartX), helpstring("起点横坐标")] HRESULT StartX([out, retval] long *pVal);
		[propput, id(CXPROPID_StartX), helpstring("起点横坐标")] HRESULT StartX([in] long newVal);
		[propget, id(CXPROPID_StartY), helpstring("起点纵坐标")] HRESULT StartY([out, retval] long *pVal);
		[propput, id(CXPROPID_StartY), helpstring("起点纵坐标")] HRESULT StartY([in] long newVal);
		[propget, id(CXPROPID_EndX), helpstring("终点横坐标")] HRESULT EndX([out, retval] long *pVal);
		[propput, id(CXPROPID_EndX), helpstring("终点横坐标")] HRESULT EndX([in] long newVal);
		[propget, id(CXPROPID_EndY), helpstring("终点纵坐标")] HRESULT EndY([out, retval] long *pVal);
		[propput, id(CXPROPID_EndY), helpstring("终点纵坐标")] HRESULT EndY([in] long newVal);
		[propget, id(CXPROPID_MiddleX), helpstring("中间点横坐标")] HRESULT MiddleX([out, retval] long *pVal);
		[propput, id(CXPROPID_MiddleX), helpstring("中间点横坐标")] HRESULT MiddleX([in] long newVal);
		[propget, id(CXPROPID_MiddleY), helpstring("中间点纵坐标")] HRESULT MiddleY([out, retval] long *pVal);
		[propput, id(CXPROPID_MiddleY), helpstring("中间点纵坐标")] HRESULT MiddleY([in] long newVal);
		
		[propget, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([out, retval] enumEdgeStyle *pVal);
		[propput, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([in] enumEdgeStyle newVal);
		[propget, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([out, retval] float *pVal);
		[propput, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([in] float newVal);
		[propget, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([out, retval] enumLineJoinStyle *pVal);
		[propput, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([in] enumLineJoinStyle newVal);

		[propget, id(CXPROPID_FillStyle), helpstring("填充类型")] HRESULT FillStyle([out, retval] enumFillStyle *pVal);
		[propput, id(CXPROPID_FillStyle), helpstring("填充类型")] HRESULT FillStyle([in] enumFillStyle newVal);
		[propget, id(CXPROPID_HorFillDirection), helpstring("水平填充方向")] HRESULT HorizontalFillDirection([out, retval] enumHorizontalDirection *pVal);
		[propput, id(CXPROPID_HorFillDirection), helpstring("水平填充方向")] HRESULT HorizontalFillDirection([in] enumHorizontalDirection newVal);
		[propget, id(CXPROPID_VerFillDirection), helpstring("垂直填充方向")] HRESULT VerticalFillDirection([out, retval] enumVerticalDirection *pVal);
		[propput, id(CXPROPID_VerFillDirection), helpstring("垂直填充方向")] HRESULT VerticalFillDirection([in] enumVerticalDirection newVal);
		[propget, id(CXPROPID_HorFillPercent), helpstring("水平填充度")] HRESULT HorizontalFillPercent([out, retval] int *pVal);
		[propput, id(CXPROPID_HorFillPercent), helpstring("水平填充度")] HRESULT HorizontalFillPercent([in] int newVal);
		[propget, id(CXPROPID_VerFillPercent), helpstring("垂直填充度")] HRESULT VerticalFillPercent([out, retval] int *pVal);
		[propput, id(CXPROPID_VerFillPercent), helpstring("垂直填充度")] HRESULT VerticalFillPercent([in] int newVal);
		[propget, id(CXPROPID_BrushImageFileName), helpstring("位图画刷文件")] HRESULT BrushImageFileName([out, retval] BRUSHFILE *pVal);
		[propput, id(CXPROPID_BrushImageFileName), helpstring("位图画刷文件")] HRESULT BrushImageFileName([in] BRUSHFILE newVal);
			
		[propget, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_FillColor), helpstring("填充颜色")] HRESULT FillColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_FillColor), helpstring("填充颜色")] HRESULT FillColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_HighLightFillColor), helpstring("高亮填充颜色")] HRESULT HighLightFillColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_HighLightFillColor), helpstring("高亮填充颜色")] HRESULT HighLightFillColor([in] OLE_COLOR newVal);
		
		[propget, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([in] float newVal);
		[propget, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([in] float newVal);
		[propget, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([out, retval] float *pVal);
		[propput, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([in] float newVal);
		[propget, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([out, retval] enumScaleBasePoint *pVal);
		[propput, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([in] enumScaleBasePoint newVal);
		[propget, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([in] float newVal);
		[propget, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([in] float newVal);

		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
		[propget, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([out, retval] int *pVal);
		[propput, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([in] int newVal);
		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
	};

	[
		object,
		uuid(E85F842E-07D5-11D5-8C61-5254AB20ED22),
		dual,
		helpstring("IDrawPipe Interface"),
		pointer_default(unique)
	]
	interface IDrawPipe : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
	
		[propget, id(CXPROPID_LiquidColor), helpstring("液体颜色")] HRESULT LiquidColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_LiquidColor), helpstring("液体颜色")] HRESULT LiquidColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_Flow), helpstring("流动")] HRESULT Flow([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Flow), helpstring("流动")] HRESULT Flow([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_FlowDirection), helpstring("流动方向")] HRESULT FlowDirection([out, retval] enumFlowDirection *pVal);
		[propput, id(CXPROPID_FlowDirection), helpstring("流动方向")] HRESULT FlowDirection([in] enumFlowDirection newVal);
		[propget, id(CXPROPID_FlowSpeed), helpstring("流动速度")] HRESULT FlowSpeed([out, retval] enumFlowSpeed *pVal);
		[propput, id(CXPROPID_FlowSpeed), helpstring("流动速度")] HRESULT FlowSpeed([in] enumFlowSpeed newVal);
		
		[propget, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([out, retval] enumEdgeStyle *pVal);
		[propput, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([in] enumEdgeStyle newVal);
		[propget, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([out, retval] float *pVal);
		[propput, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([in] float newVal);
		[propget, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([out, retval] enumLineJoinStyle *pVal);
		[propput, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([in] enumLineJoinStyle newVal);
			
		[propget, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([in] OLE_COLOR newVal);
		
		[propget, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([in] float newVal);
		[propget, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([in] float newVal);
		[propget, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([out, retval] float *pVal);
		[propput, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([in] float newVal);
		[propget, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([out, retval] enumScaleBasePoint *pVal);
		[propput, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([in] enumScaleBasePoint newVal);
		[propget, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([in] float newVal);
		[propget, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([in] float newVal);

		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
		[propget, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([out, retval] int *pVal);
		[propput, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([in] int newVal);
		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);

		[id(CXMETHID_AddPoint), helpstring("method AddPoint")] HRESULT AddPoint(IFloatPoint* pPoint);
		[id(CXMETHID_GetNumberOfPoints), helpstring("method GetNumberOfPoints")] HRESULT GetNumberOfPoints([out, retval] long *pVal);
		[id(CXMETHID_DeletePoint), helpstring("method DeletePoint")] HRESULT DeletePoint(long lIndex);
		[id(CXMETHID_GetPointAt), helpstring("method GetPointAt")] HRESULT GetPointAt([in] long lIndex, [out, retval] IFloatPoint** ppPoint);
	};

	[
		object,
		uuid(631A305F-1991-4E39-8109-3E5BECE96430),
		dual,
		helpstring("IDrawImage Interface"),
		pointer_default(unique)
	]
	interface IDrawImage : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
	
		[propget, id(8), helpstring("当前图片")] HRESULT CurrentImage([out, retval] long *pVal);
		[propput, id(8), helpstring("当前图片")] HRESULT CurrentImage([in] long newVal);
		[propget, id(9), helpstring("按下图片显示")] HRESULT DownImageDisplayed([out, retval] VARIANT_BOOL *pVal);
		[propput, id(9), helpstring("按下图片显示")] HRESULT DownImageDisplayed([in] VARIANT_BOOL newVal);
		[propget, id(10), helpstring("移过图片显示")] HRESULT HoverImageDisplayed([out, retval] VARIANT_BOOL *pVal);
		[propput, id(10), helpstring("移过图片显示")] HRESULT HoverImageDisplayed([in] VARIANT_BOOL newVal);
		[propget, id(5), helpstring("property ImageCount")] HRESULT ImageCount([out, retval] long *pVal);

		[propget, id(CXPROPID_Transparency), helpstring("透明")] HRESULT Transparency([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Transparency), helpstring("透明")] HRESULT Transparency([in] VARIANT_BOOL newVal);
		[propget, id(7), helpstring("透明颜色")] HRESULT TransparentColor([out, retval] OLE_COLOR *pVal);
		[propput, id(7), helpstring("透明颜色")] HRESULT TransparentColor([in] OLE_COLOR newVal);
		
		[propget, id(11), helpstring("按钮风格")] HRESULT ButtonStyle([out, retval] enumBitmapButtonStyle *pVal);
		[propput, id(11), helpstring("按钮风格")] HRESULT ButtonStyle([in] enumBitmapButtonStyle newVal);
		[propget, id(12), helpstring("按钮状态")] HRESULT ButtonState([out, retval] enumButtonState *pVal);
		[propput, id(12), helpstring("按钮状态")] HRESULT ButtonState([in] enumButtonState newVal);
		[propget, id(13), helpstring("边框风格")] HRESULT FrameStyle([out, retval] enumFrameStyle *pVal);
		[propput, id(13), helpstring("边框风格")] HRESULT FrameStyle([in] enumFrameStyle newVal);
		[propget, id(14), helpstring("边框颜色")] HRESULT FrameColor([out, retval] OLE_COLOR *pVal);
		[propput, id(14), helpstring("边框颜色")] HRESULT FrameColor([in] OLE_COLOR newVal);
		
		[propget, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([in] float newVal);
		[propget, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([in] float newVal);
		[propget, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([out, retval] float *pVal);
		[propput, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([in] float newVal);
		[propget, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([out, retval] enumScaleBasePoint *pVal);
		[propput, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([in] enumScaleBasePoint newVal);
		[propget, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([in] float newVal);
		[propget, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([in] float newVal);

		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
		[propget, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([out, retval] int *pVal);
		[propput, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([in] int newVal);
		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);

		[id(1), helpstring("method LoadImage")] HRESULT LoadImage([in] VARIANT_BOOL bPrimary, [in] short nIndex, [in] BSTR bstrFileName);
		[id(2), helpstring("method LoadFromHBITMAP"), hidden] HRESULT LoadFromHBITMAP([in] VARIANT_BOOL bPrimary, [in] short nIndex, [in] long hbm, [in] long hpal);
		[id(3), helpstring("method AddImage")] HRESULT AddImage(BSTR bstrFileName);
		[id(4), helpstring("method DeleteImage")] HRESULT DeleteImage(long lIndex);
	};

	[
		object,
		uuid(E9973BB0-6C00-11D5-A46A-B9DB2752B666),
		dual,
		helpstring("IDrawTxt Interface"),
		pointer_default(unique)
	]
	interface IDrawTxt : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);
		
		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
		
		[propget, id(CXPROPID_Caption), helpstring("标题")] HRESULT Caption([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Caption), helpstring("标题")] HRESULT Caption([in] BSTR newVal);
			
		[propget, id(CXPROPID_FontName), helpstring("字体名称")] HRESULT FontName([out, retval] CXFONTNAME *pVal);
		[propput, id(CXPROPID_FontName), helpstring("字体名称")] HRESULT FontName([in] CXFONTNAME newVal);
		[propget, id(CXPROPID_FontSize), helpstring("字体尺寸")] HRESULT FontSize([out, retval] long *pVal);
		[propput, id(CXPROPID_FontSize), helpstring("字体尺寸")] HRESULT FontSize([in] long newVal);
		[propget, id(CXPROPID_FontStyle), helpstring("字体风格")] HRESULT FontStyle([out, retval] enumFontStyle *pVal);
		[propput, id(CXPROPID_FontStyle), helpstring("字体风格")] HRESULT FontStyle([in] enumFontStyle newVal);
		[propget, id(CXPROPID_UnderLine), helpstring("下划线")] HRESULT UnderLine([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_UnderLine), helpstring("下划线")] HRESULT UnderLine([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_StrikeThrough), helpstring("删除线")] HRESULT StrikeThrough([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_StrikeThrough), helpstring("删除线")] HRESULT StrikeThrough([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_Alignment), helpstring("对齐方式")] HRESULT Alignment([out, retval] enumTextAlign *pVal);
		[propput, id(CXPROPID_Alignment), helpstring("对齐方式")] HRESULT Alignment([in] enumTextAlign newVal);
		[propget, id(CXPROPID_FontColor), helpstring("字体颜色")] HRESULT FontColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_FontColor), helpstring("字体颜色")] HRESULT FontColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_AutoSize), helpstring("自动尺寸")] HRESULT AutoSize([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_AutoSize), helpstring("自动尺寸")] HRESULT AutoSize([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_WordWrap), helpstring("自动换行")] HRESULT WordWrap([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_WordWrap), helpstring("自动换行")] HRESULT WordWrap([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_IdealHeight), helpstring("理想高度")] HRESULT IdealHeight([out, retval] float *pVal);
		
		[propget, id(CXPROPID_BackStyle), helpstring("背景模式")] HRESULT BackStyle([out, retval] enumBackStyle *pVal);
		[propput, id(CXPROPID_BackStyle), helpstring("背景模式")] HRESULT BackStyle([in] enumBackStyle newVal);
		[propget, id(CXPROPID_BackColor), helpstring("背景颜色")] HRESULT BackColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_BackColor), helpstring("背景颜色")] HRESULT BackColor([in] OLE_COLOR newVal);
		
		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
		[propget, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([out, retval] int *pVal);
		[propput, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([in] int newVal);
		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
	
		[id(14), helpstring("method GetCharPosition"), hidden] HRESULT GetCharPosition(long lIndex, long* plX, long* plY);
	};

	[
		object,
		uuid(F098E098-DAA3-4B29-900D-9D77A1E7B4FB),
		dual,
		helpstring("IDrawDataLink Interface"),
		pointer_default(unique)
	]
	interface IDrawDataLink : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);
		
		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
		
		[propget, id(CXPROPID_Value), helpstring("值")] HRESULT Value([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Value), helpstring("值")] HRESULT Value([in] BSTR newVal);
		
		[propget, id(CXPROPID_FontName), helpstring("字体名称")] HRESULT FontName([out, retval] CXFONTNAME *pVal);
		[propput, id(CXPROPID_FontName), helpstring("字体名称")] HRESULT FontName([in] CXFONTNAME newVal);
		[propget, id(CXPROPID_FontSize), helpstring("字体尺寸")] HRESULT FontSize([out, retval] long *pVal);
		[propput, id(CXPROPID_FontSize), helpstring("字体尺寸")] HRESULT FontSize([in] long newVal);
		[propget, id(CXPROPID_FontStyle), helpstring("字体风格")] HRESULT FontStyle([out, retval] enumFontStyle *pVal);
		[propput, id(CXPROPID_FontStyle), helpstring("字体风格")] HRESULT FontStyle([in] enumFontStyle newVal);
		[propget, id(CXPROPID_UnderLine), helpstring("下划线")] HRESULT UnderLine([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_UnderLine), helpstring("下划线")] HRESULT UnderLine([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_StrikeThrough), helpstring("删除线")] HRESULT StrikeThrough([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_StrikeThrough), helpstring("删除线")] HRESULT StrikeThrough([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_Alignment), helpstring("对齐方式")] HRESULT Alignment([out, retval] enumTextAlign *pVal);
		[propput, id(CXPROPID_Alignment), helpstring("对齐方式")] HRESULT Alignment([in] enumTextAlign newVal);
		[propget, id(CXPROPID_FontColor), helpstring("字体颜色")] HRESULT FontColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_FontColor), helpstring("字体颜色")] HRESULT FontColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_AutoSize), helpstring("自动尺寸")] HRESULT AutoSize([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_AutoSize), helpstring("自动尺寸")] HRESULT AutoSize([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_WordWrap), helpstring("自动换行")] HRESULT WordWrap([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_WordWrap), helpstring("自动换行")] HRESULT WordWrap([in] VARIANT_BOOL newVal);
						
		[propget, id(CXPROPID_BackStyle), helpstring("背景模式")] HRESULT BackStyle([out, retval] enumBackStyle *pVal);
		[propput, id(CXPROPID_BackStyle), helpstring("背景模式")] HRESULT BackStyle([in] enumBackStyle newVal);
		[propget, id(CXPROPID_BackColor), helpstring("背景颜色")] HRESULT BackColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_BackColor), helpstring("背景颜色")] HRESULT BackColor([in] OLE_COLOR newVal);
		
		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
		[propget, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([out, retval] int *pVal);
		[propput, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([in] int newVal);
		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
	
		[id(14), helpstring("method GetCharPosition"), hidden] HRESULT GetCharPosition(long lIndex, long* plX, long* plY);
	};

	[
		object,
		uuid(07C9658C-B87E-4E62-8460-B1700BA33566),
		dual,
		helpstring("IDrawVariable Interface"),
		pointer_default(unique)
	]
	interface IDrawVariable : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);
		
		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
		
		[propget, id(CXPROPID_Value), helpstring("值")] HRESULT Value([out, retval] CXVARIABLETYPE *pVal);
		[propput, id(CXPROPID_Value), helpstring("值")] HRESULT Value([in] CXVARIABLETYPE newVal);
		[propget, id(CXPROPID_VariableType), helpstring("类型")] HRESULT Type([out, retval] enumPropertyType *pVal);
		[propput, id(CXPROPID_VariableType), helpstring("类型")] HRESULT Type([in] enumPropertyType newVal);
		
		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
	};

	[
		uuid(7D3949DB-789D-426c-A2EA-5D77C12CC787),
		helpstring("IDrawVariableEvents Interface")
	]
	dispinterface IDrawVariableEvents
	{
		properties:
		methods:
		[id(1), helpstring("改变值")] HRESULT OnChange();
		[id(2), helpstring("改变值为真")] HRESULT OnTrue();
		[id(3), helpstring("改变值为假")] HRESULT OnFalse();
	}

	[
		object,
		uuid(506EB1CB-4A25-4D7C-B9BA-8237349A9FF2),
		dual,
		helpstring("IDrawButton Interface"),
		pointer_default(unique)
	]
	interface IDrawButton : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
		
		[propput, id(CXPROPID_Caption), helpstring("标题")]
		HRESULT Caption([in]BSTR pCaption);
		[propget, id(CXPROPID_Caption), helpstring("标题")]
		HRESULT Caption([out,retval]BSTR* ppCaption);
		[propput, id(CXPROPID_Font), helpstring("字体")]
		HRESULT Font([in]IFontDisp* pFont);
		[propputref, id(CXPROPID_Font), helpstring("字体")]
		HRESULT Font([in]IFontDisp* pFont);
		[propget, id(CXPROPID_Font), helpstring("字体")]
		HRESULT Font([out,retval]IFontDisp** ppFont);
		[propput, id(CXPROPID_ForeColor), helpstring("前景颜色")]
		HRESULT ForeColor([in]OLE_COLOR clr);
		[propget, id(CXPROPID_ForeColor), helpstring("前景颜色")]
		HRESULT ForeColor([out,retval]OLE_COLOR* pclr);
		[propput, id(CXPROPID_BackColor), helpstring("背景颜色")]
		HRESULT BackColor([in]OLE_COLOR clr);
		[propget, id(CXPROPID_BackColor), helpstring("背景颜色")]
		HRESULT BackColor([out,retval]OLE_COLOR* pclr);
	
		[propputref, id(1), helpstring("默认图片")]
		HRESULT PictureNormal([in]IPictureDisp* pPicture);
		[propput, id(1), helpstring("默认图片")]
		HRESULT PictureNormal([in]IPictureDisp* pPicture);
		[propget, id(1), helpstring("默认图片")]
		HRESULT PictureNormal([out, retval]IPictureDisp** ppPicture);

		[propputref, id(2), helpstring("移过图片")]
		HRESULT PictureHover([in]IPictureDisp* pPicture);
		[propput, id(2), helpstring("移过图片")]
		HRESULT PictureHover([in]IPictureDisp* pPicture);
		[propget, id(2), helpstring("移过图片")]
		HRESULT PictureHover([out, retval]IPictureDisp** ppPicture);

		[propputref, id(3), helpstring("按下图片")]
		HRESULT PicturePushed([in]IPictureDisp* pPicture);
		[propput, id(3), helpstring("按下图片")]
		HRESULT PicturePushed([in]IPictureDisp* pPicture);
		[propget, id(3), helpstring("按下图片")]
		HRESULT PicturePushed([out, retval]IPictureDisp** ppPicture);

		[propputref, id(4), helpstring("禁止图片")]
		HRESULT PictureDisabled([in]IPictureDisp* pPicture);
		[propput, id(4), helpstring("禁止图片")]
		HRESULT PictureDisabled([in]IPictureDisp* pPicture);
		[propget, id(4), helpstring("禁止图片")]
		HRESULT PictureDisabled([out, retval]IPictureDisp** ppPicture);

		[propget, id(CXPROPID_Enabled), helpstring("使能")] HRESULT Enabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Enabled), helpstring("使能")] HRESULT Enabled([in] VARIANT_BOOL newVal);

		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
		[propget, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([out, retval] int *pVal);
		[propput, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([in] int newVal);
		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
	};

	[
		object,
		uuid(C6148AC6-831C-4C57-9426-A6794B6BA2AB),
		dual,
		helpstring("IDrawMenu Interface"),
		pointer_default(unique)
	]
	interface IDrawMenu : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
	
		[id(1), helpstring("method Popup")] 
		HRESULT Popup([in, optional] VARIANT X, [in, optional] VARIANT Y);
		[id(2), helpstring("method InsertItem")] 
		HRESULT AddItem([in] BSTR Item, [in, optional] VARIANT Index, [in, optional] VARIANT State, [in, optional] VARIANT ID,
						[in, optional] VARIANT AccelShift, [in, optional] VARIANT AccelCode);
		[id(3), helpstring("method RemoveItem")] 
		HRESULT RemoveItem([in] int Index);
		[id(4), helpstring("method GetItemState")]
		HRESULT GetItemState([in] int Index, [out, retval] long* pVal);
		[id(5), helpstring("method SetItemState")]
		HRESULT SetItemState([in] int Index, [in] long State);
		[id(6), helpstring("method GetItemText")]
		HRESULT GetItemText([in] int Index, [out, retval] BSTR* pVal);
		[id(7), helpstring("method SetItemText")]
		HRESULT SetItemText([in] int Index, [in] BSTR Item);
		[id(8), helpstring("method GetItemID")]
		HRESULT GetItemID([in] int Index, [out, retval] BSTR* pVal);
		[id(9), helpstring("method SetItemID")]
		HRESULT SetItemID([in] int Index, [in] BSTR ID);
		[propget, id(10), helpstring("property ItemCount")] 
		HRESULT ItemCount([out, retval] long *pVal);
		[id(11), helpstring("method Clear")]
		HRESULT Clear();
		[id(12), helpstring("method SelectItem")]
		HRESULT SelectItem([in] int Index);
		[id(13), helpstring("method GetItemAccelShift")]
		HRESULT GetItemAccelShift([in] int Index, [out, retval] long* pVal);
		[id(14), helpstring("method SetItemAccelShift")]
		HRESULT SetItemAccelShift([in] int Index, [in] long Shift);
		[id(15), helpstring("method GetItemAccelKeyCode")]
		HRESULT GetItemAccelKeyCode([in] int Index, [out, retval] long* pVal);
		[id(16), helpstring("method SetItemAccelKeyCode")]
		HRESULT SetItemAccelKeyCode([in] int Index, [in] long KeyCode);

		[propget, id(20), helpstring("显示按钮")] HRESULT ButtonDisplayed([out, retval] VARIANT_BOOL *pVal);
		[propput, id(20), helpstring("显示按钮")] HRESULT ButtonDisplayed([in] VARIANT_BOOL newVal);
		[propget, id(21), helpstring("按钮标题")] HRESULT ButtonCaption([out, retval] BSTR *pVal);
		[propput, id(21), helpstring("按钮标题")] HRESULT ButtonCaption([in] BSTR newVal);

		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
	};

	[
		uuid(3CAA8616-B18C-4de8-BFD4-0C6B448D99F1),
		helpstring("IDrawMenuEvents Interface")
	]
	dispinterface IDrawMenuEvents
	{
		properties:
		methods:
		[id(1), helpstring("单击菜单")] HRESULT MenuClick(int Index, BSTR ID);
		[id(2), helpstring("下拉")] HRESULT DropDown();
		[id(3), helpstring("关闭")] HRESULT CloseUp();
	}

	[
		object,
		uuid(7775B813-22FD-4F97-A566-5B432A296316),
		dual,
		helpstring("IDrawTimer Interface"),
		pointer_default(unique)
	]
	interface IDrawTimer : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
	
		[propget, id(CXPROPID_Enabled), helpstring("使能")] HRESULT Enabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Enabled), helpstring("使能")] HRESULT Enabled([in] VARIANT_BOOL newVal);
		[propget, id(2), helpstring("间隔")] HRESULT Interval([out, retval] int *pVal);
		[propput, id(2), helpstring("间隔")] HRESULT Interval([in] int newVal);

		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
	};

	[
		uuid(A2E41C21-5434-47b0-BA5B-F688CF3BDDD2),
		helpstring("IDrawTimerEvents Interface")
	]
	dispinterface IDrawTimerEvents
	{
		properties:
		methods:
		[id(1), helpstring("定时")] HRESULT Timer();
	}

//	interface ISerial;
//	interface IValueAxis;
//	interface ITimeAxis;
//	interface ILegend;
//	interface IGrid;
//
//	[
//		object,
//		uuid(D5D54180-AE60-4B10-810A-7F2BDC0175C4),
//		dual,
//		helpstring("IDrawChart Interface"),
//		pointer_default(unique)
//	]
//	interface IDrawChart : IDispatch
//	{
//		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
//		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
//		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
//		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
//		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
//		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
//		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
//		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
//		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
//		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
//		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
//		HRESULT Disconnect([in] BSTR Property);
//		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
//		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);
//
//		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
//		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
//		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
//		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
//		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
//		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
//		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
//		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
//
//		[propget, id(11), helpstring("卷动方向")] HRESULT ScrollDirection([out, retval] enumScrollDirection *pVal);
//		[propput, id(11), helpstring("卷动方向")] HRESULT ScrollDirection([in] enumScrollDirection newVal);
//		[propget, id(12), helpstring("缩放模式")] HRESULT ZoomMode([out, retval] enumZoomMode *pVal);
//		[propput, id(12), helpstring("缩放模式")] HRESULT ZoomMode([in] enumZoomMode newVal);
//		[propget, id(13), helpstring("刷新间隔")] HRESULT RefreshInterval([out, retval] long *pVal);
//		[propput, id(13), helpstring("刷新间隔")] HRESULT RefreshInterval([in] long newVal);
//		
//		[propget, id(4), helpstring("前景颜色")] HRESULT ForegroundColor([out, retval] OLE_COLOR *pVal);
//		[propput, id(4), helpstring("前景颜色")] HRESULT ForegroundColor([in] OLE_COLOR newVal);
//		[propget, id(5), helpstring("背景颜色")] HRESULT BackgroundColor([out, retval] OLE_COLOR *pVal);
//		[propput, id(5), helpstring("背景颜色")] HRESULT BackgroundColor([in] OLE_COLOR newVal);
//		[propget, id(15), helpstring("边框类型")] HRESULT FrameStyle([out, retval] enumFrameStyle *pVal);
//		[propput, id(15), helpstring("边框类型")] HRESULT FrameStyle([in] enumFrameStyle newVal);
//		[propget, id(10), helpstring("边框颜色")] HRESULT FrameColor([out, retval] OLE_COLOR *pVal);
//		[propput, id(10), helpstring("边框颜色")] HRESULT FrameColor([in] OLE_COLOR newVal);
//		[id(6), helpstring("method GetSerialsCount")] HRESULT GetSerialsCount([out, retval] long* plCount);
//		[propget, id(7), helpstring("透明")] HRESULT Transparency([out, retval] VARIANT_BOOL *pVal);
//		[propput, id(7), helpstring("透明")] HRESULT Transparency([in] VARIANT_BOOL newVal);
//		[propget, id(8), helpstring("多个时间轴")] HRESULT ShowMutiTimeAxis([out, retval] VARIANT_BOOL *pVal);
//		[propput, id(8), helpstring("多个时间轴")] HRESULT ShowMutiTimeAxis([in] VARIANT_BOOL newVal);
//		[propget, id(9), helpstring("多个值轴")] HRESULT ShowMutiValueAxis([out, retval] VARIANT_BOOL *pVal);
//		[propput, id(9), helpstring("多个值轴")] HRESULT ShowMutiValueAxis([in] VARIANT_BOOL newVal);
//		[propget, id(14), helpstring("显示标识")] HRESULT ShowLegend([out, retval] VARIANT_BOOL *pVal);
//		[propput, id(14), helpstring("显示标识")] HRESULT ShowLegend([in] VARIANT_BOOL newVal);
//
//		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
//		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
//		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
//		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
//		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
//		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
//		[propget, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([out, retval] int *pVal);
//		[propput, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([in] int newVal);
//		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
//		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
//		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
//		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
//
//		[id(1), helpstring("method AddSerial")] HRESULT AddSerial([in] BSTR szSource, [out, retval] ISerial** ppSerial);
//		[id(2), helpstring("method GetSerial")] HRESULT GetSerial([in] long lIndex, [out, retval] ISerial** ppSerial);
//		[id(3), helpstring("method RemoveSerial")] HRESULT RemoveSerial([in] long lIndex);
//	};
//	
//	[
//		object,
//		uuid(66645856-EFD4-4C02-B465-DA3EBB1A6DE3),
//		dual,
//		helpstring("ISerial Interface"),
//		pointer_default(unique)
//	]
//	interface ISerial : IDispatch
//	{
//		[propget, id(1), helpstring("property Source")] HRESULT Source([out, retval] BSTR *pVal);
//		[propput, id(1), helpstring("property Source")] HRESULT Source([in] BSTR newVal);
//		[propget, id(2), helpstring("property TimeAxis")] HRESULT TimeAxis([out, retval] ITimeAxis* *pVal);
//		[propget, id(3), helpstring("property ValueAxis")] HRESULT ValueAxis([out, retval] IValueAxis * *pVal);
//		[propget, id(4), helpstring("property Legend")] HRESULT Legend([out, retval] ILegend* *pVal);
//		[propget, id(5), helpstring("property MaxNumPoints")] HRESULT MaxNumPoints([out, retval] long *pVal);
//		[propput, id(5), helpstring("property MaxNumPoints")] HRESULT MaxNumPoints([in] long newVal);
//		[propget, id(6), helpstring("property MaxNumDisplayPoints")] HRESULT MaxNumDisplayPoints([out, retval] long *pVal);
//		[propput, id(6), helpstring("property MaxNumDisplayPoints")] HRESULT MaxNumDisplayPoints([in] long newVal);
//		[propget, id(12), helpstring("property MarkerStyle")] HRESULT MarkerStyle([out, retval] enumMarkerStyle *pVal);
//		[propput, id(12), helpstring("property MarkerStyle")] HRESULT MarkerStyle([in] enumMarkerStyle newVal);
//		[propget, id(13), helpstring("property Grid")] HRESULT Grid([out, retval] IGrid* *pVal);
//		[propget, id(7), helpstring("property LineColor")] HRESULT LineColor([out, retval] OLE_COLOR *pVal);
//		[propput, id(7), helpstring("property LineColor")] HRESULT LineColor([in] OLE_COLOR newVal);
//		[propget, id(8), helpstring("property LineStyle")] HRESULT LineStyle([out, retval] enumLineStyle *pVal);
//		[propput, id(8), helpstring("property LineStyle")] HRESULT LineStyle([in] enumLineStyle newVal);
//		[propget, id(9), helpstring("property MaxValue")] HRESULT MaxValue([out, retval] double *pVal);
//		[propput, id(9), helpstring("property MaxValue")] HRESULT MaxValue([in] double newVal);
//		[propget, id(10), helpstring("property MinValue")] HRESULT MinValue([out, retval] double *pVal);
//		[propput, id(10), helpstring("property MinValue")] HRESULT MinValue([in] double newVal);
//		[propget, id(11), helpstring("property LineWidth")] HRESULT LineWidth([out, retval] long *pVal);
//		[propput, id(11), helpstring("property LineWidth")] HRESULT LineWidth([in] long newVal);
//	};
//	
//	[
//		object,
//		uuid(5889C28B-EF84-4D27-8191-91FC9EE19A36),
//		dual,
//		helpstring("IAxis Interface"),
//		pointer_default(unique)
//	]
//	interface IValueAxis : IDispatch
//	{
//		[propget, id(1), helpstring("property NumTicks")] HRESULT NumTicks([out, retval] long *pVal);
//		[propput, id(1), helpstring("property NumTicks")] HRESULT NumTicks([in] long newVal);
//		[propget, id(2), helpstring("property Title")] HRESULT Title([out, retval] BSTR *pVal);
//		[propput, id(2), helpstring("property Title")] HRESULT Title([in] BSTR newVal);
//		[propget, id(3), helpstring("property ShowAxis")] HRESULT ShowAxis([out, retval] VARIANT_BOOL *pVal);
//		[propput, id(3), helpstring("property ShowAxis")] HRESULT ShowAxis([in] VARIANT_BOOL newVal);
//		[propget, id(4), helpstring("property ShowTitle")] HRESULT ShowTitle([out, retval] VARIANT_BOOL *pVal);
//		[propput, id(4), helpstring("property ShowTitle")] HRESULT ShowTitle([in] VARIANT_BOOL newVal);
//		[propget, id(5), helpstring("property AxisColor")] HRESULT AxisColor([out, retval] OLE_COLOR *pVal);
//		[propput, id(5), helpstring("property AxisColor")] HRESULT AxisColor([in] OLE_COLOR newVal);
//		[propget, id(6), helpstring("property TitleColor")] HRESULT TitleColor([out, retval] OLE_COLOR *pVal);
//		[propput, id(6), helpstring("property TitleColor")] HRESULT TitleColor([in] OLE_COLOR newVal);
//	};
//
//	[
//		object,
//		uuid(E541C527-EA96-4319-AA18-BE732DA6BD8F),
//		dual,
//		helpstring("ITimeAxis Interface"),
//		pointer_default(unique)
//	]
//	interface ITimeAxis : IDispatch
//	{
//		[propget, id(1), helpstring("property NumTicks")] HRESULT NumTicks([out, retval] long *pVal);
//		[propput, id(1), helpstring("property NumTicks")] HRESULT NumTicks([in] long newVal);
//		[propget, id(2), helpstring("property Title")] HRESULT Title([out, retval] BSTR *pVal);
//		[propput, id(2), helpstring("property Title")] HRESULT Title([in] BSTR newVal);
//		[propget, id(3), helpstring("property ShowAxis")] HRESULT ShowAxis([out, retval] VARIANT_BOOL *pVal);
//		[propput, id(3), helpstring("property ShowAxis")] HRESULT ShowAxis([in] VARIANT_BOOL newVal);
//		[propget, id(4), helpstring("property ShowTitle")] HRESULT ShowTitle([out, retval] VARIANT_BOOL *pVal);
//		[propput, id(4), helpstring("property ShowTitle")] HRESULT ShowTitle([in] VARIANT_BOOL newVal);
//		[propget, id(5), helpstring("property AxisColor")] HRESULT AxisColor([out, retval] OLE_COLOR *pVal);
//		[propput, id(5), helpstring("property AxisColor")] HRESULT AxisColor([in] OLE_COLOR newVal);
//		[propget, id(6), helpstring("property TitleColor")] HRESULT TitleColor([out, retval] OLE_COLOR *pVal);
//		[propput, id(6), helpstring("property TitleColor")] HRESULT TitleColor([in] OLE_COLOR newVal);
//	};
//	
//	[
//		object,
//		uuid(658D464E-7E94-4D4E-8773-C2C0D5F8AF4E),
//		dual,
//		helpstring("ILegend Interface"),
//		pointer_default(unique)
//	]
//	interface ILegend : IDispatch
//	{
//		[propget, id(1), helpstring("property Show")] HRESULT Show([out, retval] VARIANT_BOOL *pVal);
//		[propput, id(1), helpstring("property Show")] HRESULT Show([in] VARIANT_BOOL newVal);
//		[propget, id(2), helpstring("property Description")] HRESULT Description([out, retval] BSTR *pVal);
//		[propput, id(2), helpstring("property Description")] HRESULT Description([in] BSTR newVal);
//	};
//	
//	[
//		object,
//		uuid(5E416CF5-8CA1-4C61-8C9C-B3E01A81F18A),
//		dual,
//		helpstring("IGrid Interface"),
//		pointer_default(unique)
//	]
//	interface IGrid : IDispatch
//	{
//		[propget, id(1), helpstring("property HorizontalColor")] HRESULT HorizontalColor([out, retval] OLE_COLOR *pVal);
//		[propput, id(1), helpstring("property HorizontalColor")] HRESULT HorizontalColor([in] OLE_COLOR newVal);
//		[propget, id(2), helpstring("property VerticalColor")] HRESULT VerticalColor([out, retval] OLE_COLOR *pVal);
//		[propput, id(2), helpstring("property VerticalColor")] HRESULT VerticalColor([in] OLE_COLOR newVal);
//		[propget, id(3), helpstring("property Width")] HRESULT Width([out, retval] long *pVal);
//		[propput, id(3), helpstring("property Width")] HRESULT Width([in] long newVal);
//		[propget, id(4), helpstring("property HorizontalStyle")] HRESULT HorizontalStyle([out, retval] enumLineStyle *pVal);
//		[propput, id(4), helpstring("property HorizontalStyle")] HRESULT HorizontalStyle([in] enumLineStyle newVal);
//		[propget, id(5), helpstring("property VerticalStyle")] HRESULT VerticalStyle([out, retval] enumLineStyle *pVal);
//		[propput, id(5), helpstring("property VerticalStyle")] HRESULT VerticalStyle([in] enumLineStyle newVal);
//		[propget, id(6), helpstring("property NumberOfHorizontalLines")] HRESULT NumberOfHorizontalLines([out, retval] long *pVal);
//		[propput, id(6), helpstring("property NumberOfHorizontalLines")] HRESULT NumberOfHorizontalLines([in] long newVal);
//		[propget, id(7), helpstring("property NumberOfVerticalLines")] HRESULT NumberOfVerticalLines([out, retval] long *pVal);
//		[propput, id(7), helpstring("property NumberOfVerticalLines")] HRESULT NumberOfVerticalLines([in] long newVal);
//		[propget, id(8), helpstring("property ShowHorizontal")] HRESULT ShowHorizontal([out, retval] VARIANT_BOOL *pVal);
//		[propput, id(8), helpstring("property ShowHorizontal")] HRESULT ShowHorizontal([in] VARIANT_BOOL newVal);
//		[propget, id(9), helpstring("property ShowVertical")] HRESULT ShowVertical([out, retval] VARIANT_BOOL *pVal);
//		[propput, id(9), helpstring("property ShowVertical")] HRESULT ShowVertical([in] VARIANT_BOOL newVal);
//	};


	[
		odl,
		uuid(47850842-1667-456A-A28E-9B15CD2842B6),
		helpcontext(0x001e84f8),
		hidden,
		dual,
		nonextensible,
		oleautomation
	]
	interface ICxEventObj : IDispatch
	{
		[propget, id(1), helpstring("property altKey")] HRESULT altKey([out, retval] VARIANT_BOOL *pVal);
		[propput, id(1), helpstring("property altKey")] HRESULT altKey([in] VARIANT_BOOL newVal);
		[propget, id(2), helpstring("property ctrlKey")] HRESULT ctrlKey([out, retval] VARIANT_BOOL *pVal);
		[propput, id(2), helpstring("property ctrlKey")] HRESULT ctrlKey([in] VARIANT_BOOL newVal);
		[propget, id(3), helpstring("property shiftKey")] HRESULT shiftKey([out, retval] VARIANT_BOOL *pVal);
		[propput, id(3), helpstring("property shiftKey")] HRESULT shiftKey([in] VARIANT_BOOL newVal);
		[propget, id(4), helpstring("property returnValue")] HRESULT returnValue([out, retval] VARIANT *pVal);
		[propput, id(4), helpstring("property returnValue")] HRESULT returnValue([in] VARIANT newVal);
		[propget, id(5), helpstring("property cancelBubble")] HRESULT cancelBubble([out, retval] VARIANT_BOOL *pVal);
		[propput, id(5), helpstring("property cancelBubble")] HRESULT cancelBubble([in] VARIANT_BOOL newVal);
		[propget, id(6), helpstring("property keyCode")] HRESULT keyCode([out, retval] long *pVal);
		[propput, id(6), helpstring("property keyCode")] HRESULT keyCode([in] long newVal);
		[propget, id(7), helpstring("property button")] HRESULT button([out, retval] long *pVal);
		[propput, id(7), helpstring("property button")] HRESULT button([in] long newVal);
		[propget, id(8), helpstring("property x")] HRESULT x([out, retval] long *pVal);
		[propput, id(8), helpstring("property x")] HRESULT x([in] long newVal);
		[propget, id(9), helpstring("property y")] HRESULT y([out, retval] long *pVal);
		[propput, id(9), helpstring("property y")] HRESULT y([in] long newVal);
		[propget, id(10), helpstring("property clientX")] HRESULT clientX([out, retval] long *pVal);
		[propput, id(10), helpstring("property clientX")] HRESULT clientX([in] long newVal);
		[propget, id(11), helpstring("property clientY")] HRESULT clientY([out, retval] long *pVal);
		[propput, id(11), helpstring("property clientY")] HRESULT clientY([in] long newVal);
		[propget, id(12), helpstring("property screenX")] HRESULT screenX([out, retval] long *pVal);
		[propput, id(12), helpstring("property screenX")] HRESULT screenX([in] long newVal);
		[propget, id(13), helpstring("property screenY")] HRESULT screenY([out, retval] long *pVal);
		[propput, id(13), helpstring("property screenY")] HRESULT screenY([in] long newVal);
	};

	[
		object,
		uuid(D50DEF4A-F264-4BD0-A151-AA7CF4CC771B),
		dual,
		helpstring("ICxDataEntry Interface"),
		pointer_default(unique)
	]
	interface ICxDataEntry : IDispatch
	{
		[propget, id(1), helpstring("property mode")] HRESULT mode([out, retval] enumDataEntryMode *pVal);
		[propput, id(1), helpstring("property mode")] HRESULT mode([in] enumDataEntryMode newVal);
		[propget, id(2), helpstring("property var")] HRESULT var([out, retval] BSTR *pVal);
		[propput, id(2), helpstring("property var")] HRESULT var([in] BSTR newVal);
		[propget, id(3), helpstring("property min")] HRESULT min([out, retval] VARIANT *pVal);
		[propput, id(3), helpstring("property min")] HRESULT min([in] VARIANT newVal);
		[propget, id(4), helpstring("property max")] HRESULT max([out, retval] VARIANT *pVal);
		[propput, id(4), helpstring("property max")] HRESULT max([in] VARIANT newVal);
		[propget, id(5), helpstring("property closeCaption")] HRESULT closeCaption([out, retval] BSTR *pVal);
		[propput, id(5), helpstring("property closeCaption")] HRESULT closeCaption([in] BSTR newVal);
		[propget, id(6), helpstring("property openCaption")] HRESULT openCaption([out, retval] BSTR *pVal);
		[propput, id(6), helpstring("property openCaption")] HRESULT openCaption([in] BSTR newVal);
		[id(7), helpstring("method Show")] HRESULT show();
		[id(8), helpstring("method SetScriptEngineSite"), hidden] HRESULT SetScriptEngineSite(IUnknown* punkSite);
		[propget, id(9), helpstring("property fetch")] HRESULT fetch([out, retval] VARIANT_BOOL *pVal);
		[propput, id(9), helpstring("property fetch")] HRESULT fetch([in] VARIANT_BOOL newVal);
	};

	typedef [uuid(A350905F-9370-4a41-AC19-BC2D18C817D3), public]
    float single;

	[
      odl,
      uuid(C4253E1B-2E6C-4269-A586-35041D4F9CC5),
      helpcontext(0x001e84f8),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ICxReturnInteger : IDispatch 
	{
        [id(00000000), propput, helpcontext(0x001e8d04)]
        HRESULT Value([in] int Value);
        [id(00000000), propget, helpcontext(0x001e8d04)]
        HRESULT Value([out, retval] int* Value);
    };

	//用于聚合对象接口
	[
		object,
		uuid(A858A73F-EB8E-49f6-9B3D-BEE702335B5D),
		dual,
		helpstring("ICxExtendedObject Interface"),
		pointer_default(unique)
	]
	interface ICxExtendedObject : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);
	};

	//用于聚合控件接口
	[
		object,
		uuid(2741FAE9-8995-4a8a-A78E-86E8840B641C),
		dual,
		helpstring("ICxExtendedControl Interface"),
		pointer_default(unique)
	]
	interface ICxExtendedControl : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
	
		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
//		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
//		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
		[propget, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([out, retval] int *pVal);
		[propput, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([in] int newVal);
		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
		
		[propget, id(CXPROPID_TabIndex), helpstring("跳格索引")] HRESULT TabIndex([out, retval] int *pVal);
		[propput, id(CXPROPID_TabIndex), helpstring("跳格索引")] HRESULT TabIndex([in] int newVal);
		[propget, id(CXPROPID_TabStop), helpstring("跳格停止")] HRESULT TabStop([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_TabStop), helpstring("跳格停止")] HRESULT TabStop([in] VARIANT_BOOL newVal);
		
		[id(CXMETHID_SetFocus), helpstring("method SetFocus")] 
		HRESULT SetFocus();
	}

	//用于聚合控件接口
	[
		object,
		uuid(DD105DB6-14B6-4c00-A39A-A83573DE7631),
		dual,
		helpstring("ICxExtendedButtonControl Interface"),
		pointer_default(unique)
	]
	interface ICxExtendedButtonControl : ICxExtendedControl
	{
		[propget, id(CXPROPID_Default), helpstring("缺省")] HRESULT Default([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Default), helpstring("缺省")] HRESULT Default([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_Cancel), helpstring("取消")] HRESULT Cancel([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Cancel), helpstring("取消")] HRESULT Cancel([in] VARIANT_BOOL newVal);
	}

	//组合对象接口
	[
		object,
		uuid(2BE0E00C-3871-4d3a-96F3-76A806C06D3E),
		dual,
		helpstring("IGroupObject Interface"),
		pointer_default(unique)
	]
	interface IGroupObject : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
		
		[propget, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([in] float newVal);
		[propget, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([in] float newVal);
		[propget, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([out, retval] float *pVal);
		[propput, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([in] float newVal);
		[propget, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([out, retval] enumScaleBasePoint *pVal);
		[propput, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([in] enumScaleBasePoint newVal);
		[propget, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([in] float newVal);
		[propget, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([in] float newVal);
		[propget, id(CXPROPID_UniformScale), helpstring("统一缩放")] HRESULT UniformScale([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_UniformScale), helpstring("统一缩放")] HRESULT UniformScale([in] VARIANT_BOOL newVal);
				
		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
		[propget, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([out, retval] int *pVal);
		[propput, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([in] int newVal);
		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_Objects), helpstring("对象集合")]	HRESULT Objects([out, retval] IObjectCollection** ppVal);

		[id(CXMETHID_GetObjectByName), helpstring("method GetObjectByName")] 
		HRESULT GetObjectByName([in] BSTR Name, [out, retval] IUnknown** ppunkObject);
	};

	[
		object,
		uuid(4D765B89-2E46-4cff-9415-F16C41E16C0B),
		dual,
		helpstring("IGroupObject2 Interface"),
		pointer_default(unique)
	]
	interface IGroupObject2 : IGroupObject
	{
		[propget, id(CXPROPID_FillStyle), helpstring("填充类型")] HRESULT FillStyle([out, retval] enumFillStyle *pVal);
		[propput, id(CXPROPID_FillStyle), helpstring("填充类型")] HRESULT FillStyle([in] enumFillStyle newVal);
		[propget, id(CXPROPID_HorFillDirection), helpstring("水平填充方向")] HRESULT HorizontalFillDirection([out, retval] enumHorizontalDirection *pVal);
		[propput, id(CXPROPID_HorFillDirection), helpstring("水平填充方向")] HRESULT HorizontalFillDirection([in] enumHorizontalDirection newVal);
		[propget, id(CXPROPID_VerFillDirection), helpstring("垂直填充方向")] HRESULT VerticalFillDirection([out, retval] enumVerticalDirection *pVal);
		[propput, id(CXPROPID_VerFillDirection), helpstring("垂直填充方向")] HRESULT VerticalFillDirection([in] enumVerticalDirection newVal);
		[propget, id(CXPROPID_HorFillPercent), helpstring("水平填充度")] HRESULT HorizontalFillPercent([out, retval] int *pVal);
		[propput, id(CXPROPID_HorFillPercent), helpstring("水平填充度")] HRESULT HorizontalFillPercent([in] int newVal);
		[propget, id(CXPROPID_VerFillPercent), helpstring("垂直填充度")] HRESULT VerticalFillPercent([out, retval] int *pVal);
		[propput, id(CXPROPID_VerFillPercent), helpstring("垂直填充度")] HRESULT VerticalFillPercent([in] int newVal);
		[propget, id(CXPROPID_BrushImageFileName), helpstring("位图画刷文件")] HRESULT BrushImageFileName([out, retval] BRUSHFILE *pVal);
		[propput, id(CXPROPID_BrushImageFileName), helpstring("位图画刷文件")] HRESULT BrushImageFileName([in] BRUSHFILE newVal);
					 
		[propget, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([out, retval] enumEdgeStyle *pVal);
		[propput, id(CXPROPID_EdgeStyle), helpstring("边界线型")] HRESULT EdgeStyle([in] enumEdgeStyle newVal);
		[propget, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([out, retval] float *pVal);
		[propput, id(CXPROPID_EdgeWidth), helpstring("边界线宽")] HRESULT EdgeWidth([in] float newVal);
		[propget, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([out, retval] enumLineJoinStyle *pVal);
		[propput, id(CXPROPID_LineJoinStyle), helpstring("接头类型")] HRESULT JoinStyle([in] enumLineJoinStyle newVal);
			
		[propget, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_EdgeColor), helpstring("边界颜色")] HRESULT EdgeColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_HighLightEdgeColor), helpstring("高亮边界颜色")] HRESULT HighLightEdgeColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_FillColor), helpstring("填充颜色")] HRESULT FillColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_FillColor), helpstring("填充颜色")] HRESULT FillColor([in] OLE_COLOR newVal);
		[propget, id(CXPROPID_HighLightFillColor), helpstring("高亮填充颜色")] HRESULT HighLightFillColor([out, retval] OLE_COLOR *pVal);
		[propput, id(CXPROPID_HighLightFillColor), helpstring("高亮填充颜色")] HRESULT HighLightFillColor([in] OLE_COLOR newVal);
	};

	//窗口对象事件接口
	[
		uuid(F1A2309D-A865-4ed9-B166-ACF011B5D7D0),
		helpstring("IGroupObjectEvents Interface")
	]
	dispinterface IGroupObjectEvents
	{
		properties:
		methods:
		[id(CXEVENID_CLICK), helpstring("单击")] HRESULT Click();
		[id(CXEVENID_DBLCLICK), helpstring("双击")] HRESULT DblClick();
		[id(CXEVENID_KEYDOWN), helpstring("键盘按下")] HRESULT KeyDown();
		[id(CXEVENID_KEYUP), helpstring("键盘弹起")] HRESULT KeyUp();
		[id(CXEVENID_KEYPRESS), helpstring("键盘按住")] HRESULT KeyPress();
		[id(CXEVENID_MOUSEDOWN), helpstring("鼠标按下")] HRESULT MouseDown();
		[id(CXEVENID_MOUSEMOVE), helpstring("鼠标移过")] HRESULT MouseMove();
		[id(CXEVENID_MOUSEUP), helpstring("鼠标弹起")] HRESULT MouseUp();
		[id(CXEVENID_MOUSELEAVE), helpstring("鼠标离开")] HRESULT MouseLeave();
	}

	//子模块对象接口
	[
		object,
		uuid(26F09B53-43A9-445c-BC7A-A5CEA022E312),
		dual,
		helpstring("IFormObject Interface"),
		pointer_default(unique)
	]
	interface IFormObject : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
		
		[propput, id(CXPROPID_ForeColor), helpstring("前景颜色")]
		HRESULT ForeColor([in]OLE_COLOR clr);
		[propget, id(CXPROPID_ForeColor), helpstring("前景颜色")]
		HRESULT ForeColor([out,retval]OLE_COLOR* pclr);
		[propput, id(CXPROPID_BackColor), helpstring("背景颜色")]
		HRESULT BackColor([in]OLE_COLOR clr);
		[propget, id(CXPROPID_BackColor), helpstring("背景颜色")]
		HRESULT BackColor([out,retval]OLE_COLOR* pclr);

		[propget, id(CXPROPID_BrushImageFileName), helpstring("位图画刷文件")] HRESULT BrushImageFileName([out, retval] BRUSHFILE *pVal);
		[propput, id(CXPROPID_BrushImageFileName), helpstring("位图画刷文件")] HRESULT BrushImageFileName([in] BRUSHFILE newVal);
		[propget, id(CXPROPID_Transparency), helpstring("透明")] HRESULT Transparency([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Transparency), helpstring("透明")] HRESULT Transparency([in] VARIANT_BOOL newVal);
		[propput, id(CXPROPID_VisibleLayer), helpstring("可见层")] HRESULT VisibleLayer([in] long lLayer);
		[propget, id(CXPROPID_VisibleLayer), helpstring("可见层")] HRESULT VisibleLayer([out, retval] long* lLayer);
			
		[propget, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointX), helpstring("旋转横坐标")] HRESULT RoateBasePointX([in] float newVal);
		[propget, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([out, retval] float *pVal);
		[propput, id(CXPROPID_RoateBasePointY), helpstring("旋转纵坐标")] HRESULT RoateBasePointY([in] float newVal);
		[propget, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([out, retval] float *pVal);
		[propput, id(CXPROPID_RotateAngle), helpstring("旋转角度")] HRESULT RotateAngle([in] float newVal);
		[propget, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([out, retval] enumScaleBasePoint *pVal);
		[propput, id(CXPROPID_ScaleBasePoint), helpstring("缩放基点")] HRESULT ScaleBasePoint([in] enumScaleBasePoint newVal);
		[propget, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_HorScale), helpstring("水平缩放比例")] HRESULT HorizontalScale([in] float newVal);
		[propget, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([out, retval] float *pVal);
		[propput, id(CXPROPID_VerScale), helpstring("垂直缩放比例")] HRESULT VerticalScale([in] float newVal);
		[propget, id(CXPROPID_UniformScale), helpstring("统一缩放")] HRESULT UniformScale([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_UniformScale), helpstring("统一缩放")] HRESULT UniformScale([in] VARIANT_BOOL newVal);
				
		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
		[propget, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([out, retval] int *pVal);
		[propput, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([in] int newVal);
		[propget, id(CXPROPID_TagGroup), helpstring("标签组")] HRESULT TagGroup([out, retval] TAGGROUPTYPE *pVal);
		[propput, id(CXPROPID_TagGroup), helpstring("标签组")] HRESULT TagGroup([in] TAGGROUPTYPE newVal);
		[propget, id(CXPROPID_AssocTagGroup), helpstring("关联标签组")] HRESULT AssocTagGroup([out, retval] TAGGROUPTYPE *pVal);
		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_Objects), helpstring("对象集合")]	HRESULT Objects([out, retval] IObjectCollection** ppVal);

		[id(CXMETHID_GetObjectByName), helpstring("method GetObjectByName")] 
		HRESULT GetObjectByName([in] BSTR Name, [out, retval] IUnknown** ppunkObject);
	};

	//窗口对象事件接口
	[
		uuid(EFA27FCD-E10C-4775-A6F3-C25C097C3C84),
		helpstring("IFormObjectEvents Interface")
	]
	dispinterface IFormObjectEvents
	{
		properties:
		methods:
		[id(CXEVENID_CLICK), helpstring("单击")] HRESULT Click();
		[id(CXEVENID_DBLCLICK), helpstring("双击")] HRESULT DblClick();
		[id(CXEVENID_KEYDOWN), helpstring("键盘按下")] HRESULT KeyDown();
		[id(CXEVENID_KEYUP), helpstring("键盘弹起")] HRESULT KeyUp();
		[id(CXEVENID_KEYPRESS), helpstring("键盘按住")] HRESULT KeyPress();
		[id(CXEVENID_MOUSEDOWN), helpstring("鼠标按下")] HRESULT MouseDown();
		[id(CXEVENID_MOUSEMOVE), helpstring("鼠标移过")] HRESULT MouseMove();
		[id(CXEVENID_MOUSEUP), helpstring("鼠标弹起")] HRESULT MouseUp();
		[id(CXEVENID_MOUSELEAVE), helpstring("鼠标离开")] HRESULT MouseLeave();
		[id(CXEVENID_INITIALIZE), helpstring("初始化")] HRESULT Initialize();
	}

	//报表对象接口
	[
		object,
		uuid(F0A5FD97-FE32-4091-A43B-488A8EB29FBC),
		dual,
		helpstring("IReportSection Interface"),
		pointer_default(unique)
	]
	interface IReportSection : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);


		[propget, id(CXPROPID_ForcePageBreak), helpstring("强制分页")] HRESULT ForcePageBreak([out, retval] enumForcePageBreak *pVal);
		[propput, id(CXPROPID_ForcePageBreak), helpstring("强制分页")] HRESULT ForcePageBreak([in] enumForcePageBreak newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
		[propget, id(CXPROPID_KeepTogether), helpstring("保持一起")] HRESULT KeepTogether([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_KeepTogether), helpstring("保持一起")] HRESULT KeepTogether([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
	};

	//报表对象接口
	[
		object,
		uuid(6C92D770-8D58-4817-B2AB-96554D98D4BF),
		dual,
		helpstring("IReportObject Interface"),
		pointer_default(unique)
	]
	interface IReportObject : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
		
		[propget, id(CXPROPID_LeftMargin), helpstring("左边距")] HRESULT LeftMargin([out, retval] float *pVal);
		[propput, id(CXPROPID_LeftMargin), helpstring("左边距")] HRESULT LeftMargin([in] float newVal);
		[propget, id(CXPROPID_TopMargin), helpstring("上边距")] HRESULT TopMargin([out, retval] float *pVal);
		[propput, id(CXPROPID_TopMargin), helpstring("上边距")] HRESULT TopMargin([in] float newVal);
		[propget, id(CXPROPID_RightMargin), helpstring("右边距")] HRESULT RightMargin([out, retval] float *pVal);
		[propput, id(CXPROPID_RightMargin), helpstring("右边距")] HRESULT RightMargin([in] float newVal);
		[propget, id(CXPROPID_BottomMargin), helpstring("下边距")] HRESULT BottomMargin([out, retval] float *pVal);
		[propput, id(CXPROPID_BottomMargin), helpstring("下边距")] HRESULT BottomMargin([in] float newVal);
		
		[propput, id(CXPROPID_ForeColor), helpstring("前景颜色")]
		HRESULT ForeColor([in]OLE_COLOR clr);
		[propget, id(CXPROPID_ForeColor), helpstring("前景颜色")]
		HRESULT ForeColor([out,retval]OLE_COLOR* pclr);
		[propput, id(CXPROPID_BackColor), helpstring("背景颜色")]
		HRESULT BackColor([in]OLE_COLOR clr);
		[propget, id(CXPROPID_BackColor), helpstring("背景颜色")]
		HRESULT BackColor([out,retval]OLE_COLOR* pclr);
	
		[propput, id(CXPROPID_VisibleLayer), helpstring("可见层")] HRESULT VisibleLayer([in] long lLayer);
		[propget, id(CXPROPID_VisibleLayer), helpstring("可见层")] HRESULT VisibleLayer([out, retval] long* lLayer);
			
		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
		[propget, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([out, retval] int *pVal);
		[propput, id(CXPROPID_Privilege), helpstring("权限")] HRESULT Privilege([in] int newVal);
		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
		
		[id(1), helpstring("method PrintOut")] HRESULT PrintOut();
		[id(2), helpstring("method PrintPreview")] HRESULT PrintPreview();
	};

	//窗口对象事件接口
	[
		uuid(8F99ED75-036C-4ad1-B673-C605CA45F8E1),
		helpstring("IReportObjectEvents Interface")
	]
	dispinterface IReportObjectEvents
	{
		properties:
		methods:
	}

	//窗口对象接口
	[
		object,
		uuid(80008000-8000-8000-8000-800080008205),
		dual,
		helpstring("IUserForm Interface"),
		pointer_default(unique)
	]
	interface IUserForm : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
		
		[propput, id(CXPROPID_Caption), helpstring("标题")]
		HRESULT Caption([in]BSTR strCaption);
		[propget, id(CXPROPID_Caption), helpstring("标题")]
		HRESULT Caption([out,retval]BSTR* pstrCaption);

		[propputref, id(CXPROPID_Font), helpstring("字体")]
		HRESULT Font([in]IFontDisp* pFont);
		[propput, id(CXPROPID_Font), helpstring("字体")]
		HRESULT Font([in]IFontDisp* pFont);
		[propget, id(CXPROPID_Font), helpstring("字体")]
		HRESULT Font([out, retval]IFontDisp** ppFont);

		[propput, id(CXPROPID_ForeColor), helpstring("前景颜色")]
		HRESULT ForeColor([in]OLE_COLOR clr);
		[propget, id(CXPROPID_ForeColor), helpstring("前景颜色")]
		HRESULT ForeColor([out,retval]OLE_COLOR* pclr);

		[propput, id(CXPROPID_BackColor), helpstring("背景颜色")]
		HRESULT BackColor([in]OLE_COLOR clr);
		[propget, id(CXPROPID_BackColor), helpstring("背景颜色")]
		HRESULT BackColor([out,retval]OLE_COLOR* pclr);

		[propget, id(CXPROPID_BrushImageFileName), helpstring("位图画刷文件")] HRESULT BrushImageFileName([out, retval] BRUSHFILE *pVal);
		[propput, id(CXPROPID_BrushImageFileName), helpstring("位图画刷文件")] HRESULT BrushImageFileName([in] BRUSHFILE newVal);
			
		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
		[propget, id(CXPROPID_Menu), helpstring("菜单")] HRESULT Menu([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Menu), helpstring("菜单")] HRESULT Menu([in] BSTR newVal);
		[propget, id(CXPROPID_ScanInterval), helpstring("扫描间隔")] HRESULT ScanInterval([out, retval] UINT *pVal);
		[propput, id(CXPROPID_ScanInterval), helpstring("扫描间隔")] HRESULT ScanInterval([in] UINT newVal);
		[propget, id(CXPROPID_SecurityArea), helpstring("安全区")] HRESULT SecurityArea([out, retval] SECURITYAREATYPE *pVal);
		[propput, id(CXPROPID_SecurityArea), helpstring("安全区")] HRESULT SecurityArea([in] SECURITYAREATYPE newVal);
		[propget, id(CXPROPID_TagGroup), helpstring("标签组")] HRESULT TagGroup([out, retval] TAGGROUPTYPE *pVal);
		[propput, id(CXPROPID_TagGroup), helpstring("标签组")] HRESULT TagGroup([in] TAGGROUPTYPE newVal);
		[propget, id(CXPROPID_AssocTagGroup), helpstring("关联标签组")] HRESULT AssocTagGroup([out, retval] TAGGROUPTYPE *pVal);
		[propget, id(CXPROPID_VisibleLayer), helpstring("可见层")] HRESULT VisibleLayer([out, retval] long* lLayer);
		[propput, id(CXPROPID_VisibleLayer), helpstring("可见层")] HRESULT VisibleLayer([in] long lLayer);
		[propget, id(CXPROPID_Objects), helpstring("对象集合")]	HRESULT Objects([out, retval] IObjectCollection** ppVal);
		[propget, id(CXPROPID_WindowHandle), helpstring("窗口句柄")] HRESULT WindowHandle([out, retval] OLE_HANDLE* pVal);
		[propget, id(CXPROPID_AllowDirectDraw), helpstring("允许直接绘制")] HRESULT AllowDirectDraw([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_AllowDirectDraw), helpstring("允许直接绘制")] HRESULT AllowDirectDraw([in] VARIANT_BOOL newVal);
		
		[id(CXMETHID_GetHitObject), helpstring("method GetHitObject")] 
		HRESULT GetHitObject([in] long XPos, [in] long YPos, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_GetObjectByName), helpstring("method GetObjectByName")] 
		HRESULT GetObjectByName([in] BSTR Name, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_ForceRefresh), helpstring("method ForceRefresh")] 
		HRESULT ForceRefresh();
		[id(CXMETHID_BindDataLinksToTagGroup), helpstring("method BindDataLinksToTagGroup")] 
		HRESULT BindDataLinksToTagGroup([in] BSTR Group);

//		OLE_HANDLE WindowHandle;
	}

	[
		object,
		uuid(1AE68DD5-7CFD-42f9-AAA1-ABED376D4E85),
		dual,
		helpstring("ISubUserForm Interface"),
		pointer_default(unique)
	]
	interface ISubUserForm : IUserForm
	{
		[propget, id(CXPROPID_StartUpPosition), helpstring("首次出现位置")] HRESULT StartUpPosition([out, retval] enumStartUpPosition *pVal);
		[propput, id(CXPROPID_StartUpPosition), helpstring("首次出现位置")] HRESULT StartUpPosition([in] enumStartUpPosition newVal);

		[propget, id(CXPROPID_BorderStyle), helpstring("边框风格")] 
		HRESULT BorderStyle([out, retval] enumBorderStyle *pVal);
		[propput, id(CXPROPID_BorderStyle), helpstring("边框风格")] 
		HRESULT BorderStyle([in] enumBorderStyle newVal);

		[propget, id(CXPROPID_ControlBox), helpstring("控制框")] HRESULT ControlBox([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_ControlBox), helpstring("控制框")] HRESULT ControlBox([in] VARIANT_BOOL newVal);
				
//		[propget, id(CXPROPID_ShowModal), helpstring("显示模式")] HRESULT ShowModal([out, retval] VARIANT_BOOL *pVal);
//		[propput, id(CXPROPID_ShowModal), helpstring("显示模式")] HRESULT ShowModal([in] VARIANT_BOOL newVal);
		
		[id(4), helpstring("method Show")] 
		HRESULT Show([in, optional] VARIANT Modal);
		[id(5), helpstring("method Hide")] 
		HRESULT Hide();
		[id(6), helpstring("method Close")] 
		HRESULT Close();
	}

	[
		object,
		uuid(4B73D6FC-65A8-472d-A63E-4435121E9C89),
		dual,
		helpstring("IObjectCollection Interface"),
		pointer_default(unique)
	]
	interface IObjectCollection : IDispatch
	{
	[propget, helpstring("Returns number of items in collection.")]
	HRESULT Count([out, retval] long* retval);

	[propget, id(DISPID_VALUE), helpstring("Given an index, returns an item in the collection.")]
	HRESULT Item([in] long Index, [out, retval] VARIANT* retval);

	[propget, restricted, id(DISPID_NEWENUM),
	helpstring("returns an enumerator for the collection.")]	// Must be propget. 
	HRESULT _NewEnum([out, retval] IUnknown** retval);	
	};

	[
		object,
		uuid(067E2551-8458-4551-A7E3-98CD9AE58D07),
		dual,
		helpstring("ILookupDynamic Interface"),
		pointer_default(unique)
	]
	interface ILookupDynamic : IDispatch
	{
		[id(1), helpstring("method AddLevel")] HRESULT AddLevel([in] VARIANT pInput1, [in] VARIANT pInput2, [in] VARIANT pOutput);
		[id(2), helpstring("method GetLevel")] HRESULT GetLevel([in] int iIndex, [out] VARIANT* pInput1, [out] VARIANT* pInput2, [out] VARIANT* pOutput);
		[id(3), helpstring("method RemoveLevel")] HRESULT RemoveLevel([in] int iIndex);
		[id(4), helpstring("method RemoveAllLevels")] HRESULT RemoveAllLevels();
		[propget, id(5), helpstring("property Source")] HRESULT Source([out, retval] BSTR *pVal);
		[propput, id(5), helpstring("property Source")] HRESULT Source([in] BSTR newVal);
		[propget, id(6), helpstring("property LevelsCount")] HRESULT LevelsCount([out, retval] long *pVal);
		[propput, id(6), helpstring("property LevelsCount")] HRESULT LevelsCount([in] long newVal);
		[propget, id(7), helpstring("property ExactMatch")] HRESULT ExactMatch([out, retval] BOOL *pVal);
		[propput, id(7), helpstring("property ExactMatch")] HRESULT ExactMatch([in] BOOL newVal);

	};

	[
		object,
		uuid(0C03AC55-3AC4-41EB-BD17-175DD9123DF8),
		dual,
		helpstring("ILinearDynamic Interface"),
		pointer_default(unique)
	]
	interface ILinearDynamic : IDispatch
	{
		[propget, id(1), helpstring("property HiInValue")] HRESULT HiInValue([out, retval] VARIANT *pVal);
		[propput, id(1), helpstring("property HiInValue")] HRESULT HiInValue([in] VARIANT newVal);
		[propget, id(2), helpstring("property LoInValue")] HRESULT LoInValue([out, retval] VARIANT *pVal);
		[propput, id(2), helpstring("property LoInValue")] HRESULT LoInValue([in] VARIANT newVal);
		[propget, id(3), helpstring("property HiOutValue")] HRESULT HiOutValue([out, retval] VARIANT *pVal);
		[propput, id(3), helpstring("property HiOutValue")] HRESULT HiOutValue([in] VARIANT newVal);
		[propget, id(4), helpstring("property LoOutValue")] HRESULT LoOutValue([out, retval] VARIANT *pVal);
		[propput, id(4), helpstring("property LoOutValue")] HRESULT LoOutValue([in] VARIANT newVal);
		[propget, id(5), helpstring("property Source")] HRESULT Source([out, retval] BSTR *pVal);
		[propput, id(5), helpstring("property Source")] HRESULT Source([in] BSTR newVal);
		[propget, id(6), helpstring("property UseOffset")] HRESULT UseOffset([out, retval] BOOL *pVal);
		[propput, id(6), helpstring("property UseOffset")] HRESULT UseOffset([in] BOOL newVal);
		[propget, id(7), helpstring("property EnableMouseInput")] HRESULT EnableMouseInput([out, retval] BOOL *pVal);
		[propput, id(7), helpstring("property EnableMouseInput")] HRESULT EnableMouseInput([in] BOOL newVal);
		[propget, id(8), helpstring("property FetchInput")] HRESULT FetchInput([out, retval] BOOL *pVal);
		[propput, id(8), helpstring("property FetchInput")] HRESULT FetchInput([in] BOOL newVal);
	};

	[
		object,
		uuid(6BD41726-70D0-4D6D-9170-AAE0F69FD33C),
		dual,
		helpstring("IFormatDynamic Interface"),
		pointer_default(unique)
	]
	interface IFormatDynamic : IDispatch
	{
		[propget, id(1), helpstring("property Source")] HRESULT Source([out, retval] BSTR *pVal);
		[propput, id(1), helpstring("property Source")] HRESULT Source([in] BSTR newVal);
		[propget, id(2), helpstring("property Format")] HRESULT Format([out, retval] BSTR *pVal);
		[propput, id(2), helpstring("property Format")] HRESULT Format([in] BSTR newVal);
		[propget, id(3), helpstring("property SourceDataType")] HRESULT SourceDataType([out, retval] int *pVal);
		[propput, id(3), helpstring("property SourceDataType")] HRESULT SourceDataType([in] int newVal);
		[id(4), helpstring("method SetNumericFormat")] HRESULT SetNumericFormat(VARIANT vaWholeDigits, VARIANT vaDecimalDigits, int iJustify);
		[id(5), helpstring("method GetNumericFormat")] HRESULT GetNumericFormat(VARIANT* pvaWholeDigits, VARIANT* pvaDecimalDigits, int* pJustify);
		[id(6), helpstring("method Clone")] HRESULT Clone(IFormatDynamic** ppDynamic);
		[propget, id(7), helpstring("property DisplaySample")] HRESULT DisplaySample([out, retval] BSTR *pVal);
		[propget, id(8), helpstring("property EnableMouseInput")] HRESULT EnableMouseInput([out, retval] BOOL *pVal);
		[propput, id(8), helpstring("property EnableMouseInput")] HRESULT EnableMouseInput([in] BOOL newVal);
	};

	[
		object,
		uuid(62BF4FDF-C548-458D-A0F4-DF0C60D99390),
		dual,
		helpstring("IDirectDynamic Interface"),
		pointer_default(unique)
	]
	interface IDirectDynamic : IDispatch
	{
		[propget, id(1), helpstring("property Source")] HRESULT Source([out, retval] BSTR *pVal);
		[propput, id(1), helpstring("property Source")] HRESULT Source([in] BSTR newVal);
		[propget, id(2), helpstring("property EnableMouseInput")] HRESULT EnableMouseInput([out, retval] BOOL *pVal);
		[propput, id(2), helpstring("property EnableMouseInput")] HRESULT EnableMouseInput([in] BOOL newVal);
		[id(3), helpstring("method Clone")] HRESULT Clone(IDirectDynamic** ppDynamic);
	};

	interface ICxDataConnection;
	interface ICxDataRecordset;
	interface ICxDataField;



	[
		object,
		uuid(424024A4-5846-4A64-99DD-695857F1FC5D),
		dual,
		helpstring("ICxDataConnection Interface"),
		pointer_default(unique)
	]
	interface ICxDataConnection : IDispatch
	{
		[propget, id(1), helpstring("property ConnectionString")] HRESULT ConnectionString([out, retval] BSTR *pVal);
		[propput, id(1), helpstring("property ConnectionString")] HRESULT ConnectionString([in] BSTR newVal);
		[propget, id(2), helpstring("property UserName")] HRESULT UserName([out, retval] BSTR *pVal);
		[propput, id(2), helpstring("property UserName")] HRESULT UserName([in] BSTR newVal);
		[propget, id(3), helpstring("property Password")] HRESULT Password([out, retval] BSTR *pVal);
		[propput, id(3), helpstring("property Password")] HRESULT Password([in] BSTR newVal);
		[propget, id(4), helpstring("property ConnectionTimeout")] HRESULT ConnectionTimeout([out, retval] long *pVal);
		[propput, id(4), helpstring("property ConnectionTimeout")] HRESULT ConnectionTimeout([in] long newVal);
		[propget, id(5), helpstring("property CommandTimeout")] HRESULT CommandTimeout([out, retval] long *pVal);
		[propput, id(5), helpstring("property CommandTimeout")] HRESULT CommandTimeout([in] long newVal);
	};
	[
		object,
		uuid(BB7E961D-0A97-48A9-A764-AE4A1924A04A),
		dual,
		helpstring("ICxDataRecordset Interface"),
		pointer_default(unique)
	]
	interface ICxDataRecordset : IDispatch
	{
		[propget, id(0), helpstring("property Field")] HRESULT Field([in] VARIANT Index, [out, retval] ICxDataField* *pVal);
		[propget, id(1), helpstring("property Source")] HRESULT Source([out, retval] BSTR *pVal);
		[propput, id(1), helpstring("property Source")] HRESULT Source([in] BSTR newVal);
		[id(2), helpstring("method Open")] HRESULT Open();
		[id(3), helpstring("method Close")] HRESULT Close();
		[id(4), helpstring("method MoveNext")] HRESULT MoveNext();
		[id(5), helpstring("method MovePrevious")] HRESULT MovePrevious();
		[id(6), helpstring("method MoveFirst")] HRESULT MoveFirst();
		[id(7), helpstring("method MoveLast")] HRESULT MoveLast();
		[propget, id(8), helpstring("property BOF")] HRESULT BOF([out, retval] VARIANT_BOOL *pVal);
		[propget, id(9), helpstring("property EOF")] HRESULT EOF([out, retval] VARIANT_BOOL *pVal);
		[propget, id(10), helpstring("property MaxRecords")] HRESULT MaxRecords([out, retval] long *pVal);
		[propput, id(10), helpstring("property MaxRecords")] HRESULT MaxRecords([in] long newVal);
		[propget, id(11), helpstring("property FieldCount")] HRESULT FieldCount([out, retval] long *pVal);
		[propget, id(12), helpstring("property ActiveConnection")] HRESULT ActiveConnection([out, retval] VARIANT *pVal);
		[propput, id(12), helpstring("property ActiveConnection")] HRESULT ActiveConnection([in] VARIANT newVal);
		[propget, id(13), helpstring("property CommandType")] HRESULT CommandType([out, retval] enumCommandType *pVal);
		[propput, id(13), helpstring("property CommandType")] HRESULT CommandType([in] enumCommandType newVal);
		[propget, id(14), helpstring("property RecordCount")] HRESULT RecordCount([out, retval] long *pVal);
		[propput, id(14), helpstring("property RecordCount")] HRESULT RecordCount([in] long newVal);
		[propget, id(15), helpstring("property AbsolutePosition")] HRESULT AbsolutePosition([out, retval] enumPosition *pVal);
		[propput, id(15), helpstring("property AbsolutePosition")] HRESULT AbsolutePosition([in] enumPosition newVal);
		[propget, id(16), helpstring("property UseLocalSetup"), hidden] HRESULT UseLocalSetup([out, retval] VARIANT_BOOL *pVal);
		[propput, id(16), helpstring("property UseLocalSetup"), hidden] HRESULT UseLocalSetup([in] VARIANT_BOOL newVal);
//		[propget, id(16), helpstring("property Bookmark")] HRESULT Bookmark([out, retval] VARIANT *pVal);
//		[propput, id(16), helpstring("property Bookmark")] HRESULT Bookmark([in] VARIANT newVal);
	};

	[
		object,
		uuid(89CEF098-A543-47B4-84B7-AB0A9ED0EFB1),
		dual,
		helpstring("ICxDataField Interface"),
		pointer_default(unique)
	]
	interface ICxDataField : IDispatch
	{
		[propget, id(1), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propget, id(0), helpstring("property Value")] HRESULT Value([out, retval] VARIANT *pVal);
		[propget, id(2), helpstring("property Avg")] HRESULT Avg([out, retval] VARIANT *pVal);
		[propget, id(3), helpstring("property Max")] HRESULT Max([out, retval] VARIANT *pVal);
		[propget, id(4), helpstring("property Min")] HRESULT Min([out, retval] VARIANT *pVal);
		[propget, id(5), helpstring("property Sum")] HRESULT Sum([out, retval] VARIANT *pVal);	
		[propget, id(6), helpstring("property Count")] HRESULT Count([out, retval] long *pVal);	
		[propget, id(7), helpstring("property DefinedSize")] HRESULT DefinedSize([out, retval] long *pVal);
		[propget, id(8), helpstring("property Type")] HRESULT Type([out, retval] enumDataType *pVal);
	};

	//报表对象接口
	[
		object,
		uuid(06A075DF-2EFC-4012-8DA2-AEFE3AC04967),
		dual,
		helpstring("IDataReport Interface"),
		pointer_default(unique)
	]
	interface IDataReport : IDispatch
	{
		[propput, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([in] BSTR bstrName);
		[propget, id(CXPROPID_Name), helpstring("名称")] HRESULT Name([out, retval] BSTR* pbstrName);
		[id(CXMETHID_IsConnected), helpstring("method IsConnected")] 
		HRESULT IsConnected([in] BSTR Property, [out, retval] VARIANT_BOOL* pbHasConnection);
		[id(CXMETHID_ConnectObject), helpstring("method ConnectObject")] 
		HRESULT ConnectObject([in] BSTR Property, [in] IUnknown* punkObject);
		[id(CXMETHID_ConnectDirect), helpstring("method ConnectDirect")] 
		HRESULT ConnectDirect([in] BSTR Property, [in] BSTR bstrDataSource);
		[id(CXMETHID_GetConnectObject), helpstring("method GetConnectObject")] 
		HRESULT GetConnectObject([in] BSTR Property, [out, retval] IUnknown** ppunkObject);
		[id(CXMETHID_Disconnect), helpstring("method Disconnect")] 
		HRESULT Disconnect([in] BSTR Property);
		[id(CXMETHID_GetConnectState), helpstring("method GetConnectState"), hidden] 
		HRESULT GetConnectState(DISPID dispid, [out, retval] int* pState);

		[propget, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_HorPosition), helpstring("水平位置")] HRESULT HorizontalPosition([in] float newVal);
		[propget, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([out, retval] float *pVal);
		[propput, id(CXPROPID_VerPosition), helpstring("垂直位置")] HRESULT VerticalPosition([in] float newVal);
		[propget, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([out, retval] float *pVal);
		[propput, id(CXPROPID_Width), helpstring("宽度")] HRESULT Width([in] float newVal);
		[propget, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([out, retval] float *pVal);
		[propput, id(CXPROPID_Height), helpstring("高度")] HRESULT Height([in] float newVal);
		
		[propget, id(CXPROPID_LeftMargin), helpstring("左边距")] HRESULT LeftMargin([out, retval] float *pVal);
		[propput, id(CXPROPID_LeftMargin), helpstring("左边距")] HRESULT LeftMargin([in] float newVal);
		[propget, id(CXPROPID_TopMargin), helpstring("上边距")] HRESULT TopMargin([out, retval] float *pVal);
		[propput, id(CXPROPID_TopMargin), helpstring("上边距")] HRESULT TopMargin([in] float newVal);
		[propget, id(CXPROPID_RightMargin), helpstring("右边距")] HRESULT RightMargin([out, retval] float *pVal);
		[propput, id(CXPROPID_RightMargin), helpstring("右边距")] HRESULT RightMargin([in] float newVal);
		[propget, id(CXPROPID_BottomMargin), helpstring("下边距")] HRESULT BottomMargin([out, retval] float *pVal);
		[propput, id(CXPROPID_BottomMargin), helpstring("下边距")] HRESULT BottomMargin([in] float newVal);
		
		[propput, id(CXPROPID_ForeColor), helpstring("前景颜色")]
		HRESULT ForeColor([in]OLE_COLOR clr);
		[propget, id(CXPROPID_ForeColor), helpstring("前景颜色")]
		HRESULT ForeColor([out,retval]OLE_COLOR* pclr);
		[propput, id(CXPROPID_BackColor), helpstring("背景颜色")]
		HRESULT BackColor([in]OLE_COLOR clr);
		[propget, id(CXPROPID_BackColor), helpstring("背景颜色")]
		HRESULT BackColor([out,retval]OLE_COLOR* pclr);
	
		[propput, id(CXPROPID_VisibleLayer), helpstring("可见层")] HRESULT VisibleLayer([in] long lLayer);
		[propget, id(CXPROPID_VisibleLayer), helpstring("可见层")] HRESULT VisibleLayer([out, retval] long* lLayer);
			
		[propget, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, id(CXPROPID_Description), helpstring("描述")] HRESULT Description([in] BSTR newVal);
		[propget, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([out, retval] int *pVal);
		[propput, id(CXPROPID_Layer), helpstring("图层")] HRESULT Layer([in] int newVal);
		[propget, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Locked), helpstring("锁定")] HRESULT Locked([in] VARIANT_BOOL newVal);
		[propget, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([out, retval] enumMousePointer *pVal);
		[propput, id(CXPROPID_MousePointer), helpstring("鼠标指针")] HRESULT MousePointer([in] enumMousePointer newVal);
//		[propget, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([out, retval] BSTR *pVal);
//		[propput, id(CXPROPID_ToolTipText), helpstring("提示文本")] HRESULT ToolTipText([in] BSTR newVal);
		[propget, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(CXPROPID_Visible), helpstring("可见")] HRESULT Visible([in] VARIANT_BOOL newVal);
	
		[propputref, id(CXPROPID_DataConnection), helpstring("数据连接")]
		HRESULT DataConnection([in]ICxDataConnection* pConnection);
		[propput, id(CXPROPID_DataConnection), helpstring("数据连接")]
		HRESULT DataConnection([in]ICxDataConnection* pConnection);
		[propget, id(CXPROPID_DataConnection), helpstring("数据连接")]
		HRESULT DataConnection([out, retval]ICxDataConnection** ppConnection);

		[propputref, id(CXPROPID_DataRecordset), helpstring("数据记录集")]
		HRESULT DataRecordset([in]ICxDataRecordset* pRecordset);
		[propput, id(CXPROPID_DataRecordset), helpstring("数据记录集")]
		HRESULT DataRecordset([in]ICxDataRecordset* pRecordset);
		[propget, id(CXPROPID_DataRecordset), helpstring("数据记录集")]
		HRESULT DataRecordset([out, retval]ICxDataRecordset** ppRecordset);

		[propget, id(CXPROPID_PageCount), helpstring("页数")] HRESULT PageCount([out, retval] int *pVal);
		[propget, id(CXPROPID_Page), helpstring("页")] HRESULT Page([out, retval] int *pVal);
	
		[id(1), helpstring("method PrintOut")] HRESULT PrintOut();
		[id(2), helpstring("method PrintPreview")] HRESULT PrintPreview();
	};

	//窗口对象事件接口
	[
		uuid(B2443D67-77E0-4b34-B0A4-BF03157841A8),
		helpstring("IDataReportEvents Interface")
	]
	dispinterface IDataReportEvents
	{
		properties:
		methods:
		[id(CXEVENID_INITIALIZE), helpstring("初始化")] HRESULT Initialize();
	}

	// 扩充全局函数
	[
		object,
		uuid(88E9BA55-2259-4339-8B9C-5405337DDB78),
		dual,
		helpstring("ICxGlobalFunction Interface"),
		pointer_default(unique)
	]
	interface ICxGlobalFunctions : IDispatch
	{
		[propget, id(1), helpstring("property EventObject")] 
			HRESULT EventObject([out, retval] ICxEventObj** pVal);
		[propget, id(2), helpstring("property DataEntry")] 
			HRESULT DataEntry([out, retval] ICxDataEntry** pVAl);
		[propget, id(3), helpstring("property PictureDirectory")] 
			HRESULT PictureDirectory([out, retval] BSTR* pbstrPath);
		[propput, id(3), helpstring("property PictureDirectory")] 
			HRESULT PictureDirectory([in] BSTR bstrPath);
		[propget, id(4), helpstring("property Application")] 
			HRESULT Application(BSTR Item, [out, retval] VARIANT *pVal);
		[propput, id(4), helpstring("property Application")] 
			HRESULT Application(BSTR Item, [in] VARIANT newVal);
		[propget, id(5), helpstring("property Frame")] 
			HRESULT Frame(BSTR Item, [out, retval] VARIANT *pVal);
		[propput, id(5), helpstring("property Frame")] 
			HRESULT Frame(BSTR Item, [in] VARIANT newVal);
		[id(6), helpstring("method ShowPicture")] 
			HRESULT ShowPicture(BSTR PictureName);
		[id(7), helpstring("method DoEvent")] 
			HRESULT DoEvent();
		[id(8), helpstring("method ExitApplication")] 
			HRESULT ExitApplication();
		[id(9), helpstring("method ContainerContext")] 
			HRESULT ContainerContext(VARIANT Tag);
		[id(10), helpstring("method Login")] 
			HRESULT Login([in, optional] VARIANT UserName, [in, optional] VARIANT Password, [in, optional] VARIANT NoPrompt, [out, retval] VARIANT_BOOL* pVal);
		[id(11), helpstring("method Logout")] 
			HRESULT Logout();
		[id(12), helpstring("method ManageUser")] 
			HRESULT ManageUser();
		[id(13), helpstring("method ChangePassword")] 
			HRESULT ChangePassword();
		[id(14), helpstring("method GetUserName")] 
			HRESULT GetUserName([out, retval] BSTR* pbstrUser);
		[id(15), helpstring("method GetUserSecurityArea")] 
			HRESULT GetUserSecurityArea([out, retval] BSTR* SecurityArea);
		[id(16), helpstring("method GetUserPrivilege")] 
			HRESULT GetUserPrivilege([out, retval] int* Privilege);
		[id(17), helpstring("method SetEventSubPara"), hidden] 
			HRESULT SetEventSubPara(int Para, VARIANT NewValue, [out, retval] VARIANT *pVal);
		[id(18), helpstring("method PrintWindow")] 
		HRESULT PrintWindow([in, optional] VARIANT Window,
			[in, optional] VARIANT LeftMargin, [in, optional] VARIANT TopMargin, 
			[in, optional] VARIANT RightMargin, [in, optional] VARIANT BottomMargin,
			[in, optional] VARIANT HorizontalScale, [in, optional] VARIANT VerticalScale,
			[in, optional] VARIANT MultipleScale);
		[id(19), helpstring("method CreateServerObject")] 
			HRESULT CreateServerObject(VARIANT ClassValue, [out, retval] VARIANT* retval);
		[propget, id(20), helpstring("property FrameWindow")] 
			HRESULT FrameWindow([out, retval] VARIANT *pVal);
		[id(21), helpstring("method LoadMapFile")] 
		HRESULT LoadPicutreFile([in] BSTR FileName, [out, retval] VARIANT *pVal);
		[id(22), helpstring("method SaveTempMapFile")] 
		HRESULT SaveTempPicutreFile(VARIANT Data, [out, retval] BSTR* pbstrFileName);
		[id(23), helpstring("method ShowSoftKeyboard")] 
		HRESULT ShowSoftKeyboard([in, optional] VARIANT Hide, [in, optional] VARIANT OnlyNumber, [in, optional] VARIANT XPos, [in, optional] VARIANT YPos);
		[propget, id(24), helpstring("property OpenParameter")] 
		HRESULT OpenParameter([in, optional] VARIANT Item, [out, retval] BSTR *pVal);
		[propget, id(25), helpstring("property SetupDirectory")] 
			HRESULT SetupDirectory([out, retval] BSTR* pbstrPath);
	}

	//窗口对象事件接口
	[
		uuid(80008000-8000-8000-8000-800080008206),
		helpstring("IUserFormEvents Interface"),
	]
	dispinterface IUserFormEvents
	{
		properties:
		methods:
		[id(CXEVENID_INITIALIZE), helpstring("初始化")] HRESULT Initialize();
		[id(CXEVENID_CLICK), helpstring("单击")] HRESULT Click();
		[id(CXEVENID_DBLCLICK), helpstring("双击")] HRESULT DblClick();
		[id(CXEVENID_KEYDOWN), helpstring("键盘按下")] HRESULT KeyDown();
		[id(CXEVENID_KEYUP), helpstring("键盘弹起")] HRESULT KeyUp();
		[id(CXEVENID_KEYPRESS), helpstring("键盘按住")] HRESULT KeyPress();
		[id(CXEVENID_MOUSEDOWN), helpstring("鼠标按下")] HRESULT MouseDown();
		[id(CXEVENID_MOUSEMOVE), helpstring("鼠标移过")] HRESULT MouseMove();
		[id(CXEVENID_MOUSEUP), helpstring("鼠标弹起")] HRESULT MouseUp();
		[id(CXEVENID_ACTIVATE), helpstring("激活")] HRESULT Activate();
		[id(CXEVENID_DEACTIVATE), helpstring("活动失效")] HRESULT Deactivate();
		[id(CXEVENID_RESIZE), helpstring("调整大小")] HRESULT Resize();
		[id(CXEVENID_SCAN), helpstring("扫描")] HRESULT Scan();
		[id(CXEVENID_QUERYCLOSE), helpstring("询问关闭")] HRESULT QueryClose();
		[id(CXEVENID_TERMINATE), helpstring("终止")] HRESULT Terminate();
	}

	//自定义绘制对象事件
	[
		uuid(5E665C60-D727-4107-B2B6-BF310DD72128),
		helpstring("_ICxDrawObjectEvents Interface")
	]
	dispinterface _ICxDrawObjectEvents
	{
		properties:
		methods:
		[id(CXEVENID_CLICK), helpstring("单击")] HRESULT Click();
		[id(CXEVENID_DBLCLICK), helpstring("双击")] HRESULT DblClick();
		[id(CXEVENID_KEYDOWN), helpstring("键盘按下")] HRESULT KeyDown();
		[id(CXEVENID_KEYUP), helpstring("键盘弹起")] HRESULT KeyUp();
		[id(CXEVENID_KEYPRESS), helpstring("键盘按住")] HRESULT KeyPress();
		[id(CXEVENID_MOUSEDOWN), helpstring("鼠标按下")] HRESULT MouseDown();
		[id(CXEVENID_MOUSEMOVE), helpstring("鼠标移过")] HRESULT MouseMove();
		[id(CXEVENID_MOUSEUP), helpstring("鼠标弹起")] HRESULT MouseUp();
		[id(CXEVENID_MOUSELEAVE), helpstring("鼠标离开")] HRESULT MouseLeave();
	};

	[
		uuid(EE226700-429A-4252-AC4D-2117025C3BA8),
		helpstring("IDrawDataLinkEvents Interface")
	]
	dispinterface IDrawDataLinkEvents
	{
		properties:
		methods:
		[id(1), helpstring("输入")] HRESULT Input();
		[id(CXEVENID_CLICK), helpstring("单击")] HRESULT Click();
		[id(CXEVENID_DBLCLICK), helpstring("双击")] HRESULT DblClick();
		[id(CXEVENID_KEYDOWN), helpstring("键盘按下")] HRESULT KeyDown();
		[id(CXEVENID_KEYUP), helpstring("键盘弹起")] HRESULT KeyUp();
		[id(CXEVENID_KEYPRESS), helpstring("键盘按住")] HRESULT KeyPress();
		[id(CXEVENID_MOUSEDOWN), helpstring("鼠标按下")] HRESULT MouseDown();
		[id(CXEVENID_MOUSEMOVE), helpstring("鼠标移过")] HRESULT MouseMove();
		[id(CXEVENID_MOUSEUP), helpstring("鼠标弹起")] HRESULT MouseUp();
		[id(CXEVENID_MOUSELEAVE), helpstring("鼠标离开")] HRESULT MouseLeave();
	}

	[
		uuid(80E4C822-6F0E-11D5-A46A-ABD633FF0766),
		helpstring("FloatPoint Class")
	]
	coclass FloatPoint
	{
		[default] interface IFloatPoint;
	};

	[
		uuid(26EA8099-912C-4EEE-AD13-FD9EA6B0D95C),
		helpstring("DrawLine Class")
	]
	coclass DrawLine
	{
		[default] interface IDrawLine;
		[default, source] dispinterface _ICxDrawObjectEvents;
	};

	[
		uuid(EF1554D7-9747-4787-AA0A-6005118D238C),
		helpstring("DrawRectangle Class")
	]
	coclass DrawRectangle
	{
		[default] interface IDrawRectangle;
		[default, source] dispinterface _ICxDrawObjectEvents;
	};

	[
		uuid(D7E0A108-CCA8-4EDF-AFCC-5EEAF3145A59),
		helpstring("DrawEllipse Class")
	]
	coclass DrawEllipse
	{
		[default] interface IDrawEllipse;
		[default, source] dispinterface _ICxDrawObjectEvents;
	};

	[
		uuid(07659E7F-E686-4576-A646-AF186D6C8720),
		helpstring("DrawRoundRectangle Class")
	]
	coclass DrawRoundRectangle
	{
		[default] interface IDrawRoundRectangle;
		[default, source] dispinterface _ICxDrawObjectEvents;
	};

	[
		uuid(A4E66FE3-9D90-4F3A-A119-97B815914DA5),
		helpstring("DrawPolyline Class")
	]
	coclass DrawPolyline
	{
		[default] interface IDrawPolyline;
		[default, source] dispinterface _ICxDrawObjectEvents;
	};

	[
		uuid(023B8C82-6F41-49FE-B4B6-AC12B0710006),
		helpstring("DrawPolygon Class")
	]
	coclass DrawPolygon
	{
		[default] interface IDrawPolygon;
		[default, source] dispinterface _ICxDrawObjectEvents;
	};

	[
		uuid(71E8B5A5-37B9-4DC5-8BDA-098C391A98AF),
		helpstring("DrawArc Class")
	]
	coclass DrawArc
	{
		[default] interface IDrawArc;
		[default, source] dispinterface _ICxDrawObjectEvents;
	};

	[
		uuid(7127E1B2-A7DA-4A86-BC27-A559BFBB7F90),
		helpstring("DrawPie Class")
	]
	coclass DrawPie
	{
		[default] interface IDrawPie;
		[default, source] dispinterface _ICxDrawObjectEvents;
	};

	[
		uuid(751AE1AD-C7D3-4FB9-8B1A-551F848606E3),
		helpstring("DrawChord Class")
	]
	coclass DrawChord
	{
		[default] interface IDrawChord;
		[default, source] dispinterface _ICxDrawObjectEvents;
	};

	[
		uuid(E85F842F-07D5-11D5-8C61-5254AB20ED22),
		helpstring("DrawPipe Class")
	]
	coclass DrawPipe
	{
		[default] interface IDrawPipe;
		[default, source] dispinterface _ICxDrawObjectEvents;
	};

	[
		uuid(A9EF82F7-1757-405C-886D-405928E9EFAD),
		helpstring("DrawImage Class")
	]
	coclass DrawImage
	{
		[default] interface IDrawImage;
		[default, source] dispinterface _ICxDrawObjectEvents;
	};

	[
		uuid(E9973BB1-6C00-11D5-A46A-B9DB2752B666),
		helpstring("DrawTxt Class")
	]
	coclass DrawTxt
	{
		[default] interface IDrawTxt;
		[default, source] dispinterface _ICxDrawObjectEvents;
	};

	[
		uuid(653F53C1-8EF4-42FC-9119-225C51DE6523),
		helpstring("DrawDataLink Class")
	]
	coclass DrawDataLink
	{
		[default] interface IDrawDataLink;
		[default, source] dispinterface IDrawDataLinkEvents;
	};

	[
		uuid(45145258-07DE-4DA1-8B73-B8523C4522A0),
		helpstring("DrawVariable Class")
	]
	coclass DrawVariable
	{
		[default] interface IDrawVariable;
		[default, source] dispinterface IDrawVariableEvents;
	};

	[
		uuid(C7C4FF5F-AA2F-4188-B2E2-FEAC38640873),
		helpstring("DrawButton Class")
	]
	coclass DrawButton
	{
		[default] interface IDrawButton;
		[default, source] dispinterface _ICxDrawObjectEvents;
	};

	[
		uuid(D0DAAA07-5867-4051-94D8-F0F5FC084265),
		helpstring("DrawMenu Class")
	]
	coclass DrawMenu
	{
		[default] interface IDrawMenu;
		[default, source] dispinterface IDrawMenuEvents;
	};

	[
		uuid(617AE6A5-4886-433B-A139-F0C54B519A26),
		helpstring("DrawTimer Class")
	]
	coclass DrawTimer
	{
		[default] interface IDrawTimer;
		[default, source] dispinterface IDrawTimerEvents;
	};

//	[
//		uuid(EF34F70F-78B8-4A70-937C-380244524C67),
//		helpstring("DrawChart Class")
//	]
//	coclass DrawChart
//	{
//		[default] interface IDrawChart;
//		[default, source] dispinterface _ICxDrawObjectEvents;
//	};

	[
		uuid(0E7A0BB7-BCCB-4f59-9434-A2E9E8184C2C),
		helpstring("UserForm Class")
	]
	coclass UserForm
	{
		[default] interface IUserForm;
		[default, source] dispinterface IUserFormEvents;
	};

	[
		uuid(BCFACE65-3518-42d2-B309-89087827445E),
		helpstring("SubUserForm Class")
	]
	coclass SubUserForm
	{
		[default] interface ISubUserForm;
		[default, source] dispinterface IUserFormEvents;
	};

	[
		uuid(D282BB33-FED9-446c-9F06-FC69C371C42B),
		helpstring("DataReport Class")
	]
	coclass DataReport
	{
		[default] interface IDataReport;
		[default, source] dispinterface IDataReportEvents;
	};

	[
		uuid(A5A495FF-BDA6-467e-9518-48BDB73CE9C0),
		helpstring("GroupObject Class")
	]
	coclass GroupObject
	{
		[default] interface IGroupObject;
		[default, source] dispinterface IGroupObjectEvents;
	};

	[
		uuid(932362AB-1A3C-4e2a-A459-F204B1F70E10),
		helpstring("FormObject Class")
	]
	coclass FormObject
	{
		[default] interface IFormObject;
		[default, source] dispinterface IFormObjectEvents;
	};

	[
		uuid(8384A009-5E4F-4d4a-8BAF-7BD6D620285D),
		helpstring("ReportSection Class")
	]
	coclass ReportSection
	{
		[default] interface IReportSection;
	};

	[
		uuid(0F36B050-2725-428e-957A-3F71E1D2B336),
		helpstring("ReportObject Class")
	]
	coclass ReportObject
	{
		[default] interface IReportObject;
		[default, source] dispinterface IReportObjectEvents;
	};

	[
		uuid(96943274-47C5-430C-9ECC-FA515325A209),
		helpstring("LookupDynamic Class")
	]
	coclass LookupDynamic
	{
		[default] interface ILookupDynamic;
	};

	[
		uuid(D5BAB7D7-F3ED-4F21-996D-492C8F1CD572),
		helpstring("LinearDynamic Class")
	]
	coclass LinearDynamic
	{
		[default] interface ILinearDynamic;
	};

	[
		uuid(6DC9B1A9-0153-46C2-900F-D6C14F057B12),
		helpstring("FormatDynamic Class")
	]
	coclass FormatDynamic
	{
		[default] interface IFormatDynamic;
	};

	[
		uuid(69620D03-AA48-4F2C-B897-5FF4BDD35F99),
		helpstring("DirectDynamic Class")
	]
	coclass DirectDynamic
	{
		[default] interface IDirectDynamic;
	};

	[
		uuid(71185291-1637-4E03-BAD8-B63002AB7E81),
		helpstring("CxDataEntry Class")
	]
	coclass CxDataEntry
	{
		[default] interface ICxDataEntry;
	};

	[
		uuid(6D977D5E-8793-458C-ABD3-EA6CCF339CED),
		helpstring("CxEventObj Class")
	]
	coclass CxEventObj
	{
		[default] interface ICxEventObj;
	};

	[
      uuid(08409ECB-D50A-49FD-8ACC-23DABC609D17),
      helpcontext(0x001e84f8)
    ]
    coclass CxReturnInteger 
	{
        [default] interface ICxReturnInteger;
    };

	[
		uuid(65F875DF-7EC3-4DBD-870E-08D496D4776C),
		helpstring("CxDataConnection Class")
	]
	coclass CxDataConnection
	{
		[default] interface ICxDataConnection;
	};
	[
		uuid(54A812E0-8C18-46AF-B583-5683CDB8729A),
		helpstring("CxDataRecordset Class")
	]
	coclass CxDataRecordset
	{
		[default] interface ICxDataRecordset;
	};
	[
		uuid(4F069302-BE6E-48AC-9572-176AE8DF3855),
		helpstring("CxDataField Class")
	]
	coclass CxDataField
	{
		[default] interface ICxDataField;
	};
};
